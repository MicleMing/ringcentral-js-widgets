{"version":3,"sources":["components/ActiveCallList/index.js"],"names":["isConferenceCall","normalizedCall","to","phoneNumber","length","toName","ActiveCallList","calls","className","currentLocale","areaCode","countryCode","brand","showContactDisplayPlaceholder","formatPhone","onClickToSms","onCreateContact","onViewContact","outboundSmsPermission","internalSmsPermission","isLoggedContact","onLogCall","autoLog","loggingMap","webphoneAnswer","webphoneReject","webphoneHangup","webphoneResume","webphoneToVoicemail","enableContactFallback","title","sourceIcons","isWebRTC","currentCall","conferenceCallEquipped","hasConferenceCall","disableMerge","mergeToConference","isSessionAConferenceCall","onConfirmMergeCall","styles","list","listTitle","map","call","showMergeCall","isOnConferenceCall","onMergeCall","webphoneSession","id","isCurrentCallAConf","direction","callDirections","inbound","outbound","partyCalls","propTypes","PropTypes","string","isRequired","array","bool","func","object","defaultProps","undefined","i"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport ActiveCallItem from '../ActiveCallItem';\nimport styles from './styles.scss';\n\nfunction isConferenceCall(normalizedCall) {\n  return normalizedCall.to.phoneNumber.length === 0 && normalizedCall.toName === 'Conference';\n}\n\nfunction ActiveCallList({\n  calls,\n  className,\n  currentLocale,\n  areaCode,\n  countryCode,\n  brand,\n  showContactDisplayPlaceholder,\n  formatPhone,\n  onClickToSms,\n  onCreateContact,\n  onViewContact,\n  outboundSmsPermission,\n  internalSmsPermission,\n  isLoggedContact,\n  onLogCall,\n  autoLog,\n  loggingMap,\n  webphoneAnswer,\n  webphoneReject,\n  webphoneHangup,\n  webphoneResume,\n  webphoneToVoicemail,\n  enableContactFallback,\n  title,\n  sourceIcons,\n  isWebRTC,\n  currentCall,\n  conferenceCallEquipped,\n  hasConferenceCall,\n  disableMerge,\n  mergeToConference,\n  isSessionAConferenceCall,\n  onConfirmMergeCall,\n}) {\n  if (!calls.length) {\n    return null;\n  }\n\n  return (\n    <div className={classnames(styles.list, className)}>\n      <div className={styles.listTitle}>\n        {title}\n      </div>\n      {\n        calls.map((call) => {\n          let showMergeCall = false;\n          let isOnConferenceCall = false;\n          let onMergeCall = null;\n          if (conferenceCallEquipped) {\n            isOnConferenceCall = call.webphoneSession\n              ? isSessionAConferenceCall(call.webphoneSession.id)\n              : isConferenceCall(call);// in case it's an other device call\n            const isCurrentCallAConf = currentCall\n              ? isSessionAConferenceCall(currentCall.webphoneSession.id)\n              : false;\n\n            if (!isWebRTC) {\n              showMergeCall = false;\n            } else if (currentCall) {\n              if (call === currentCall) {\n                showMergeCall = false;\n              } else if (call.direction === callDirections.inbound) {\n                showMergeCall = false;\n              } else if (currentCall.direction === callDirections.outbound) {\n                if (hasConferenceCall) {\n                  showMergeCall = true;\n                  if (isOnConferenceCall) {\n                    onMergeCall = () => mergeToConference([currentCall.webphoneSession]);\n                  } else if (isCurrentCallAConf) {\n                    onMergeCall = () => mergeToConference([call.webphoneSession]);\n                  } else {\n                    onMergeCall = () => onConfirmMergeCall(call);\n                  }\n                } else {\n                  showMergeCall = true;\n                  const partyCalls = [\n                    call.webphoneSession,\n                    currentCall.webphoneSession\n                  ];\n                  onMergeCall = () => mergeToConference(partyCalls);\n                }\n              } else if (hasConferenceCall) {\n                if (isOnConferenceCall) {\n                  showMergeCall = false;\n                } else {\n                  showMergeCall = true;\n                  onMergeCall = () => {\n                    onConfirmMergeCall(call);\n                  };\n                }\n              } else {\n                showMergeCall = false;\n              }\n            } else {\n              showMergeCall = false;\n            }\n          }\n\n          return (\n            <ActiveCallItem\n              call={call}\n              key={call.id}\n              showMergeCall={showMergeCall}\n              isOnConferenceCall={isOnConferenceCall}\n              currentLocale={currentLocale}\n              areaCode={areaCode}\n              countryCode={countryCode}\n              brand={brand}\n              showContactDisplayPlaceholder={showContactDisplayPlaceholder}\n              formatPhone={formatPhone}\n              onClickToSms={onClickToSms}\n              internalSmsPermission={internalSmsPermission}\n              outboundSmsPermission={outboundSmsPermission}\n              isLoggedContact={isLoggedContact}\n              onLogCall={onLogCall}\n              onViewContact={onViewContact}\n              onCreateContact={onCreateContact}\n              onMergeCall={onMergeCall}\n              loggingMap={loggingMap}\n              webphoneAnswer={webphoneAnswer}\n              webphoneReject={webphoneReject}\n              webphoneHangup={webphoneHangup}\n              webphoneResume={webphoneResume}\n              webphoneToVoicemail={webphoneToVoicemail}\n              enableContactFallback={enableContactFallback}\n              autoLog={autoLog}\n              sourceIcons={sourceIcons}\n              disableMerge={disableMerge}\n              hasActionMenu={!isOnConferenceCall}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nActiveCallList.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  calls: PropTypes.array.isRequired,\n  areaCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  brand: PropTypes.string,\n  showContactDisplayPlaceholder: PropTypes.bool,\n  formatPhone: PropTypes.func.isRequired,\n  onClickToSms: PropTypes.func,\n  onCreateContact: PropTypes.func,\n  onViewContact: PropTypes.func,\n  outboundSmsPermission: PropTypes.bool,\n  internalSmsPermission: PropTypes.bool,\n  isLoggedContact: PropTypes.func,\n  onLogCall: PropTypes.func,\n  loggingMap: PropTypes.object,\n  webphoneAnswer: PropTypes.func,\n  webphoneReject: PropTypes.func,\n  webphoneHangup: PropTypes.func,\n  webphoneResume: PropTypes.func,\n  webphoneToVoicemail: PropTypes.func,\n  enableContactFallback: PropTypes.bool,\n  autoLog: PropTypes.bool,\n  sourceIcons: PropTypes.object,\n  isWebRTC: PropTypes.bool.isRequired,\n  conferenceCallEquipped: PropTypes.bool,\n  hasConferenceCall: PropTypes.bool,\n  currentCall: PropTypes.object,\n  disableMerge: PropTypes.bool,\n  mergeToConference: PropTypes.func,\n  isSessionAConferenceCall: PropTypes.func,\n  onConfirmMergeCall: PropTypes.func,\n};\n\nActiveCallList.defaultProps = {\n  className: undefined,\n  brand: 'RingCentral',\n  showContactDisplayPlaceholder: true,\n  onCreateContact: undefined,\n  onClickToSms: undefined,\n  outboundSmsPermission: true,\n  internalSmsPermission: true,\n  isLoggedContact: undefined,\n  onLogCall: undefined,\n  loggingMap: {},\n  webphoneAnswer: undefined,\n  webphoneReject: undefined,\n  webphoneHangup: undefined,\n  webphoneResume: undefined,\n  enableContactFallback: undefined,\n  autoLog: false,\n  onViewContact: undefined,\n  webphoneToVoicemail: undefined,\n  sourceIcons: undefined,\n  conferenceCallEquipped: false,\n  hasConferenceCall: false,\n  currentCall: undefined,\n  disableMerge: false,\n  mergeToConference: i => i,\n  isSessionAConferenceCall: () => false,\n  onConfirmMergeCall: i => i,\n};\n\nexport default ActiveCallList;\n"]}