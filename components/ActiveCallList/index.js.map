{"version":3,"sources":["components/ActiveCallList/index.js"],"names":["isConferenceCall","normalizedCall","to","phoneNumber","length","toName","ActiveCallList","calls","className","currentLocale","areaCode","countryCode","brand","showContactDisplayPlaceholder","formatPhone","onClickToSms","onCreateContact","onViewContact","outboundSmsPermission","internalSmsPermission","isLoggedContact","onLogCall","autoLog","loggingMap","webphoneAnswer","webphoneReject","webphoneHangup","webphoneResume","webphoneToVoicemail","enableContactFallback","title","sourceIcons","isWebRTC","currentCall","hasConferenceCall","disableMerge","mergeToConference","isSessionAConferenceCall","onConfirmMergeCall","styles","list","listTitle","map","call","showMergeCall","onMergeCall","isOnConferenceCall","webphoneSession","id","isCurrentCallAConf","direction","callDirections","inbound","outbound","partyCalls","propTypes","PropTypes","string","isRequired","array","bool","func","object","defaultProps","undefined","i"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport ActiveCallItem from '../ActiveCallItem';\nimport styles from './styles.scss';\n\nfunction isConferenceCall(normalizedCall) {\n  return normalizedCall.to.phoneNumber.length === 0 && normalizedCall.toName === 'Conference';\n}\n\nfunction ActiveCallList({\n  calls,\n  className,\n  currentLocale,\n  areaCode,\n  countryCode,\n  brand,\n  showContactDisplayPlaceholder,\n  formatPhone,\n  onClickToSms,\n  onCreateContact,\n  onViewContact,\n  outboundSmsPermission,\n  internalSmsPermission,\n  isLoggedContact,\n  onLogCall,\n  autoLog,\n  loggingMap,\n  webphoneAnswer,\n  webphoneReject,\n  webphoneHangup,\n  webphoneResume,\n  webphoneToVoicemail,\n  enableContactFallback,\n  title,\n  sourceIcons,\n  isWebRTC,\n  currentCall,\n  hasConferenceCall,\n  disableMerge,\n  mergeToConference,\n  isSessionAConferenceCall,\n  onConfirmMergeCall,\n}) {\n  if (!calls.length) {\n    return null;\n  }\n\n  return (\n    <div className={classnames(styles.list, className)}>\n      <div className={styles.listTitle}>\n        {title}\n      </div>\n      {\n        calls.map((call) => {\n          let showMergeCall = false;\n          let onMergeCall;\n          const isOnConferenceCall = call.webphoneSession\n            ? isSessionAConferenceCall(call.webphoneSession.id)\n            : isConferenceCall(call);// in case it's an other device call\n          const isCurrentCallAConf = currentCall\n            ? isSessionAConferenceCall(currentCall.webphoneSession.id)\n            : false;\n\n          if (!isWebRTC) {\n            showMergeCall = false;\n          } else if (currentCall) {\n            if (call === currentCall) {\n              showMergeCall = false;\n            } else if (call.direction === callDirections.inbound) {\n              showMergeCall = false;\n            } else if (currentCall.direction === callDirections.outbound) {\n              if (hasConferenceCall) {\n                showMergeCall = true;\n                if (isOnConferenceCall) {\n                  onMergeCall = () => mergeToConference([currentCall.webphoneSession]);\n                } else if (isCurrentCallAConf) {\n                  onMergeCall = () => mergeToConference([call.webphoneSession]);\n                } else {\n                  onMergeCall = () => onConfirmMergeCall(call);\n                }\n              } else {\n                showMergeCall = true;\n                const partyCalls = [\n                  call.webphoneSession,\n                  currentCall.webphoneSession\n                ];\n                onMergeCall = () => mergeToConference(partyCalls);\n              }\n            } else if (hasConferenceCall) {\n              if (isOnConferenceCall) {\n                showMergeCall = false;\n              } else {\n                showMergeCall = true;\n                onMergeCall = () => {\n                  onConfirmMergeCall(call);\n                };\n              }\n            } else {\n              showMergeCall = false;\n            }\n          } else {\n            showMergeCall = false;\n          }\n\n          return (\n            <ActiveCallItem\n              call={call}\n              key={call.id}\n              showMergeCall={showMergeCall}\n              isOnConferenceCall={isOnConferenceCall}\n              currentLocale={currentLocale}\n              areaCode={areaCode}\n              countryCode={countryCode}\n              brand={brand}\n              showContactDisplayPlaceholder={showContactDisplayPlaceholder}\n              formatPhone={formatPhone}\n              onClickToSms={onClickToSms}\n              internalSmsPermission={internalSmsPermission}\n              outboundSmsPermission={outboundSmsPermission}\n              isLoggedContact={isLoggedContact}\n              onLogCall={onLogCall}\n              onViewContact={onViewContact}\n              onCreateContact={onCreateContact}\n              onMergeCall={onMergeCall}\n              loggingMap={loggingMap}\n              webphoneAnswer={webphoneAnswer}\n              webphoneReject={webphoneReject}\n              webphoneHangup={webphoneHangup}\n              webphoneResume={webphoneResume}\n              webphoneToVoicemail={webphoneToVoicemail}\n              enableContactFallback={enableContactFallback}\n              autoLog={autoLog}\n              sourceIcons={sourceIcons}\n              disableMerge={disableMerge}\n              hasActionMenu={!isOnConferenceCall}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nActiveCallList.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  calls: PropTypes.array.isRequired,\n  areaCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  brand: PropTypes.string,\n  showContactDisplayPlaceholder: PropTypes.bool,\n  formatPhone: PropTypes.func.isRequired,\n  onClickToSms: PropTypes.func,\n  onCreateContact: PropTypes.func,\n  onViewContact: PropTypes.func,\n  outboundSmsPermission: PropTypes.bool,\n  internalSmsPermission: PropTypes.bool,\n  isLoggedContact: PropTypes.func,\n  onLogCall: PropTypes.func,\n  loggingMap: PropTypes.object,\n  webphoneAnswer: PropTypes.func,\n  webphoneReject: PropTypes.func,\n  webphoneHangup: PropTypes.func,\n  webphoneResume: PropTypes.func,\n  webphoneToVoicemail: PropTypes.func,\n  enableContactFallback: PropTypes.bool,\n  autoLog: PropTypes.bool,\n  sourceIcons: PropTypes.object,\n  isWebRTC: PropTypes.bool.isRequired,\n  hasConferenceCall: PropTypes.bool,\n  currentCall: PropTypes.object,\n  disableMerge: PropTypes.bool,\n  mergeToConference: PropTypes.func,\n  isSessionAConferenceCall: PropTypes.func,\n  onConfirmMergeCall: PropTypes.func,\n};\n\nActiveCallList.defaultProps = {\n  className: undefined,\n  brand: 'RingCentral',\n  showContactDisplayPlaceholder: true,\n  onCreateContact: undefined,\n  onClickToSms: undefined,\n  outboundSmsPermission: true,\n  internalSmsPermission: true,\n  isLoggedContact: undefined,\n  onLogCall: undefined,\n  loggingMap: {},\n  webphoneAnswer: undefined,\n  webphoneReject: undefined,\n  webphoneHangup: undefined,\n  webphoneResume: undefined,\n  enableContactFallback: undefined,\n  autoLog: false,\n  onViewContact: undefined,\n  webphoneToVoicemail: undefined,\n  sourceIcons: undefined,\n  hasConferenceCall: false,\n  currentCall: undefined,\n  disableMerge: false,\n  mergeToConference: i => i,\n  isSessionAConferenceCall: () => false,\n  onConfirmMergeCall: i => i,\n};\n\nexport default ActiveCallList;\n"]}