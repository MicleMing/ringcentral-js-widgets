{"version":3,"sources":["components/ConversationPanel/index.js"],"names":["ConversationPanel","props","onSend","replyToReceivers","messageText","onInputHeightChange","value","setState","inputHeight","onSelectContact","idx","selected","showContactDisplayPlaceholder","parseInt","_userSelection","conversation","conversationMatches","length","autoLog","logConversation","redirect","prefill","getSelectedContact","state","contactMatches","correspondentMatches","bind","getInitialContactIndex","isLogging","loaded","loadConversation","_mounted","nextProps","prevProps","prevState","messages","readMessages","conversationId","perPage","loadPreviousMessages","unloadConversation","headerHeight","lastMatchedCorrespondentEntity","index","findIndex","contact","id","correspondents","phoneNumber","extensionNumber","undefined","groupNumbers","map","correspondent","name","onLogConversation","correspondentEntity","conversationBody","loading","showSpinner","recipients","messageSubjectRenderer","styles","spinerContainer","getMessageListHeight","dateTimeFormatter","formatPhone","loadingNextPage","getGroupPhoneNumbers","getPhoneNumber","fallbackName","getFallbackContactName","logButton","disableLinks","currentLocale","root","header","brand","contactDisplay","contactDisplaySelect","areaCode","countryCode","enableContactFallback","sourceIcons","showGroupNumberName","goBack","backButton","dynamicsFont","arrow","updateMessageText","sendButtonDisabled","Component","propTypes","PropTypes","string","isRequired","func","ConversationMessageList","arrayOf","shape","bool","object","number","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\n\nimport Spinner from '../Spinner';\nimport ConversationMessageList from '../ConversationMessageList';\nimport LogButton from '../LogButton';\nimport ContactDisplay from '../ContactDisplay';\nimport MessageInput from '../MessageInput';\n\nimport styles from './styles.scss';\n\nclass ConversationPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: this.getInitialContactIndex(),\n      isLogging: false,\n      inputHeight: 63,\n      loaded: false,\n    };\n    this._userSelection = false;\n  }\n\n  componentDidMount() {\n    this.loadConversation();\n    this._mounted = true;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      !this._userSelection &&\n      this.props.conversation &&\n      nextProps.conversation &&\n      (\n        nextProps.conversation.conversationMatches !==\n        this.props.conversation.conversationMatches ||\n        nextProps.conversation.correspondentMatches !==\n        this.props.conversation.correspondentMatches\n      )\n    ) {\n      this.setState({\n        selected: this.getInitialContactIndex(nextProps),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.messages !== this.props.messages) {\n      this.props.readMessages(this.props.conversationId);\n    }\n    if (prevState.loaded === false && this.state.loaded === true) {\n      if (this.props.messages.length < this.props.perPage) {\n        this.props.loadPreviousMessages();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n    this.props.unloadConversation();\n  }\n\n  onSend = () => {\n    this.props.replyToReceivers(this.props.messageText);\n  }\n\n  onInputHeightChange = (value) => {\n    this.setState({\n      inputHeight: value,\n    });\n  }\n\n  onSelectContact = (value, idx) => {\n    const selected = this.showContactDisplayPlaceholder\n      ? parseInt(idx, 10) - 1 : parseInt(idx, 10);\n    this._userSelection = true;\n    this.setState({\n      selected,\n    });\n    if (\n      this.props.conversation &&\n      this.props.conversation.conversationMatches &&\n      this.props.conversation.conversationMatches.length > 0 &&\n      this.props.autoLog\n    ) {\n      this.logConversation({ redirect: false, selected, prefill: false });\n    }\n  }\n\n  getMessageListHeight() {\n    const headerHeight = 41;\n    return `calc(100% - ${this.state.inputHeight + headerHeight}px)`;\n  }\n\n  getSelectedContact = (selected = this.state.selected) => {\n    if (!this.props.conversation) {\n      return null;\n    }\n    const contactMatches = this.props.conversation.correspondentMatches;\n    return (selected > -1 && contactMatches[selected]) ||\n      (contactMatches.length === 1 && contactMatches[0]) ||\n      null;\n  }\n\n  getInitialContactIndex(nextProps = this.props) {\n    const {\n      correspondentMatches,\n      lastMatchedCorrespondentEntity,\n    } = nextProps.conversation;\n    if (lastMatchedCorrespondentEntity) {\n      const index = correspondentMatches.findIndex(contact => (\n        contact.id === lastMatchedCorrespondentEntity.id\n      ));\n      if (index > -1) return index;\n    }\n    return -1;\n  }\n\n  getPhoneNumber() {\n    const {\n      conversation: {\n        correspondents = [],\n      } = {},\n    } = this.props;\n    return (correspondents.length === 1 &&\n      (correspondents[0].phoneNumber || correspondents[0].extensionNumber)) || undefined;\n  }\n\n  getGroupPhoneNumbers() {\n    const {\n      conversation: {\n        correspondents = [],\n      } = {},\n    } = this.props;\n    const groupNumbers = correspondents.length > 1 ?\n      correspondents.map(correspondent =>\n        correspondent.extensionNumber || correspondent.phoneNumber || undefined\n      )\n      : null;\n    return groupNumbers;\n  }\n\n  getFallbackContactName() {\n    const {\n      conversation: {\n        correspondents = [],\n      } = {},\n    } = this.props;\n    return (correspondents.length === 1 &&\n      (correspondents[0].name)) || undefined;\n  }\n\n  loadConversation() {\n    this.props.loadConversation(this.props.conversationId);\n    this.setState({ loaded: true });\n  }\n\n  async logConversation({ redirect = true, selected, prefill = true }) {\n    if (typeof this.props.onLogConversation === 'function' &&\n      this._mounted && !this.state.isLogging\n    ) {\n      this.setState({\n        isLogging: true,\n      });\n      await this.props.onLogConversation({\n        correspondentEntity: this.getSelectedContact(selected),\n        conversationId: this.props.conversation.conversationId,\n        redirect,\n        prefill,\n      });\n      if (this._mounted) {\n        this.setState({\n          isLogging: false,\n        });\n      }\n    }\n  }\n\n  logConversation = this.logConversation.bind(this)\n\n  render() {\n    if (!this.state.loaded) {\n      return null;\n    }\n    let conversationBody = null;\n    const loading = this.props.showSpinner;\n    const { recipients, messageSubjectRenderer } = this.props;\n    if (loading) {\n      conversationBody = (\n        <div className={styles.spinerContainer}>\n          <Spinner />\n        </div>\n      );\n    } else {\n      conversationBody = (\n        <ConversationMessageList\n          height={this.getMessageListHeight()}\n          messages={this.props.messages}\n          className={styles.conversationBody}\n          dateTimeFormatter={this.props.dateTimeFormatter}\n          showSender={recipients && recipients.length > 1}\n          messageSubjectRenderer={messageSubjectRenderer}\n          formatPhone={this.props.formatPhone}\n          loadingNextPage={this.props.loadingNextPage}\n          loadPreviousMessages={this.props.loadPreviousMessages}\n        />\n      );\n    }\n    const {\n      isLogging,\n      conversationMatches,\n      correspondentMatches,\n    } = this.props.conversation;\n    const groupNumbers = this.getGroupPhoneNumbers();\n    const phoneNumber = this.getPhoneNumber();\n    const fallbackName = this.getFallbackContactName();\n\n    const logButton = this.props.onLogConversation ?\n      (\n        <LogButton\n          className={styles.logButton}\n          onLog={this.logConversation}\n          disableLinks={this.props.disableLinks}\n          isLogged={conversationMatches.length > 0}\n          isLogging={isLogging || this.state.isLogging}\n          currentLocale={this.props.currentLocale}\n        />\n      ) :\n      null;\n    return (\n      <div className={styles.root}>\n        <div className={styles.header}>\n          <ContactDisplay\n            brand={this.props.brand}\n            className={styles.contactDisplay}\n            selectClassName={styles.contactDisplaySelect}\n            contactMatches={correspondentMatches || []}\n            selected={this.state.selected}\n            onSelectContact={this.onSelectContact}\n            disabled={this.props.disableLinks}\n            isLogging={isLogging || this.state.isLogging}\n            fallBackName={fallbackName}\n            areaCode={this.props.areaCode}\n            countryCode={this.props.countryCode}\n            phoneNumber={phoneNumber}\n            groupNumbers={groupNumbers}\n            showType={false}\n            currentLocale={this.props.currentLocale}\n            enableContactFallback={this.props.enableContactFallback}\n            showPlaceholder={this.props.showContactDisplayPlaceholder}\n            sourceIcons={this.props.sourceIcons}\n            showGroupNumberName={this.props.showGroupNumberName}\n          />\n          <a\n            onClick={() => this.props.goBack()}\n            className={styles.backButton}\n          >\n            <span className={dynamicsFont.arrow} />\n          </a>\n          {logButton}\n        </div>\n        {conversationBody}\n        <MessageInput\n          value={this.props.messageText}\n          onChange={this.props.updateMessageText}\n          disabled={this.props.sendButtonDisabled}\n          currentLocale={this.props.currentLocale}\n          onSend={this.onSend}\n          onHeightChange={this.onInputHeightChange}\n        />\n      </div>\n    );\n  }\n}\n\nConversationPanel.propTypes = {\n  brand: PropTypes.string.isRequired,\n  replyToReceivers: PropTypes.func.isRequired,\n  messages: ConversationMessageList.propTypes.messages,\n  updateMessageText: PropTypes.func,\n  messageText: PropTypes.string,\n  recipients: PropTypes.arrayOf(PropTypes.shape({\n    phoneNumber: PropTypes.string,\n    extensionNumber: PropTypes.string,\n    name: PropTypes.string,\n  })).isRequired,\n  sendButtonDisabled: PropTypes.bool.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  showSpinner: PropTypes.bool.isRequired,\n  disableLinks: PropTypes.bool,\n  conversation: PropTypes.object.isRequired,\n  onLogConversation: PropTypes.func,\n  areaCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  autoLog: PropTypes.bool,\n  enableContactFallback: PropTypes.bool,\n  dateTimeFormatter: PropTypes.func.isRequired,\n  goBack: PropTypes.func.isRequired,\n  showContactDisplayPlaceholder: PropTypes.bool,\n  sourceIcons: PropTypes.object,\n  showGroupNumberName: PropTypes.bool,\n  messageSubjectRenderer: PropTypes.func,\n  formatPhone: PropTypes.func.isRequired,\n  readMessages: PropTypes.func.isRequired,\n  loadPreviousMessages: PropTypes.func.isRequired,\n  unloadConversation: PropTypes.func.isRequired,\n  perPage: PropTypes.number,\n  conversationId: PropTypes.string.isRequired,\n  loadConversation: PropTypes.func,\n  loadingNextPage: PropTypes.bool,\n};\nConversationPanel.defaultProps = {\n  disableLinks: false,\n  onLogConversation: undefined,\n  autoLog: false,\n  enableContactFallback: undefined,\n  showContactDisplayPlaceholder: true,\n  sourceIcons: undefined,\n  showGroupNumberName: false,\n  messageText: '',\n  updateMessageText: () => null,\n  messageSubjectRenderer: undefined,\n  perPage: undefined,\n  loadConversation: () => null,\n  loadingNextPage: false\n};\n\nexport default ConversationPanel;\n"]}