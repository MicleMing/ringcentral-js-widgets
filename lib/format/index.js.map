{"version":3,"sources":["lib/format/index.js"],"names":["format","formatTypes","local","international","e164","phoneNumber","countryCode","areaCode","type","removeExtension","extensionDelimeter","input","number","extension","parsedCountry","parsedNumber","isExtension","isServiceNumber","isValid","hasPlus","isUSCA","finalType","formattedNumber","length"],"mappings":";;;;;;kBAWwBA,M;;AAXxB;;AACA;;;;;;AAEA,IAAMC,cAAc;AAClBC,SAAO,OADW;AAElBC,iBAAe,eAFG;AAGlBC,QAAM;AAHY,CAApB;;QAMSH,W,GAAAA,W;AAEM,SAASD,MAAT,OAOZ;AAAA,MANDK,WAMC,QANDA,WAMC;AAAA,8BALDC,WAKC;AAAA,MALDA,WAKC,oCALa,IAKb;AAAA,2BAJDC,QAIC;AAAA,MAJDA,QAIC,iCAJU,EAIV;AAAA,uBAHDC,IAGC;AAAA,MAHDA,IAGC,6BAHMP,YAAYC,KAGlB;AAAA,kCAFDO,eAEC;AAAA,MAFDA,eAEC,wCAFiB,KAEjB;AAAA,mCADDC,kBACC;AAAA,MADDA,kBACC,yCADoB,KACpB;;AAAA,eAUG,qBAAM,EAAEC,OAAON,WAAT,EAAsBC,wBAAtB,EAAN,CAVH;AAAA,MAEcM,MAFd,UAECP,WAFD;AAAA,MAGCQ,SAHD,UAGCA,SAHD;AAAA,MAICC,aAJD,UAICA,aAJD;AAAA,MAKCC,YALD,UAKCA,YALD;AAAA,MAMCC,WAND,UAMCA,WAND;AAAA,MAOCC,eAPD,UAOCA,eAPD;AAAA,MAQCC,OARD,UAQCA,OARD;AAAA,MASCC,OATD,UASCA,OATD;;AAYD,MAAI,CAACD,OAAL,EAAc;AACZ,WAAO,EAAP;AACD;AACD,MACED,mBACAD,WAFF,EAGE;AACA,WAAOJ,MAAP;AACD;AACD,MAAMQ,SAASd,gBAAgB,IAAhB,IAAwBA,gBAAgB,IAAvD;AACA,MAAIe,kBAAJ;AACA,MAAIb,SAASP,YAAYG,IAAzB,EAA+B;AAC7BiB,gBAAY,OAAZ;AACD,GAFD,MAEO,IAAIb,SAASP,YAAYE,aAAzB,EAAwC;AAC7CkB,gBAAY,eAAZ;AACD,GAFM,MAEA;AACLA;AACE;AACA,KAACP,aAAD;AACA;AACAM,eAAWN,kBAAkB,IAAlB,IAA0BA,kBAAkB,IAAvD,CAFA,IAGAA,kBAAkBR,WALR,GAOV,UAPU,GAQV,eARF;AASD;;AAED,MAAIgB,wBAAJ;AACA,MAAI,CAACH,OAAD,IAAYC,MAAZ,IAAsBb,QAAtB,IAAkCA,aAAa,EAA/C,IAAqDK,OAAOW,MAAP,KAAkB,CAA3E,EAA8E;AAC5ED,sBAAkB,yCACbf,QADa,GACFK,MADE,EAEhBE,iBAAiBR,WAFD,EAGhBe,SAHgB,CAAlB;AAKD,GAND,MAMO,IAAIN,YAAJ,EAAkB;AACvBO,sBAAkB,oCAChBP,YADgB,EAEhBD,iBAAiBR,WAFD,EAGhBe,SAHgB,CAAlB;AAKD,GANM,MAMA,IAAI,CAACF,OAAL,EAAc;AACnBG,sBAAkB,oCAChBV,MADgB,EAEhBN,WAFgB,EAGhBe,SAHgB,CAAlB;AAKD,GANM,MAMA;AACLC,sBAAkBV,MAAlB;AACD;AACD,SAAOC,aAAa,CAACJ,eAAd,QACFa,eADE,GACgBZ,kBADhB,GACqCG,SADrC,GAELS,eAFF;AAGD","file":"index.js","sourcesContent":["import { formatNumber } from 'libphonenumber-js';\nimport parse from '../parse';\n\nconst formatTypes = {\n  local: 'local',\n  international: 'international',\n  e164: 'e164'\n};\n\nexport { formatTypes };\n\nexport default function format({\n  phoneNumber,\n  countryCode = 'US',\n  areaCode = '',\n  type = formatTypes.local,\n  removeExtension = false,\n  extensionDelimeter = ' * ',\n}) {\n  const {\n    phoneNumber: number,\n    extension,\n    parsedCountry,\n    parsedNumber,\n    isExtension,\n    isServiceNumber,\n    isValid,\n    hasPlus,\n  } = parse({ input: phoneNumber, countryCode });\n\n  if (!isValid) {\n    return '';\n  }\n  if (\n    isServiceNumber ||\n    isExtension\n  ) {\n    return number;\n  }\n  const isUSCA = countryCode === 'CA' || countryCode === 'US';\n  let finalType;\n  if (type === formatTypes.e164) {\n    finalType = 'E.164';\n  } else if (type === formatTypes.international) {\n    finalType = 'International';\n  } else {\n    finalType = (\n      // assume local\n      !parsedCountry ||\n      // ignore US/CA difference\n      isUSCA && (parsedCountry === 'US' || parsedCountry === 'CA') ||\n      parsedCountry === countryCode\n    ) ?\n      'National' :\n      'International';\n  }\n\n  let formattedNumber;\n  if (!hasPlus && isUSCA && areaCode && areaCode !== '' && number.length === 7) {\n    formattedNumber = formatNumber(\n      `${areaCode}${number}`,\n      parsedCountry || countryCode,\n      finalType,\n    );\n  } else if (parsedNumber) {\n    formattedNumber = formatNumber(\n      parsedNumber,\n      parsedCountry || countryCode,\n      finalType,\n    );\n  } else if (!hasPlus) {\n    formattedNumber = formatNumber(\n      number,\n      countryCode,\n      finalType,\n    );\n  } else {\n    formattedNumber = number;\n  }\n  return extension && !removeExtension ?\n    `${formattedNumber}${extensionDelimeter}${extension}` :\n    formattedNumber;\n}\n"]}