{"version":3,"sources":["lib/parse/index.js"],"names":["parse","invalidCharsRegExp","cleanRegex","plusRegex","extensionDelimiter","input","countryCode","result","parsedCountry","parsedNumber","isValid","hasInvalidChars","test","isExtension","isServiceNumber","hasPlus","phoneNumber","extension","cleanInput","replace","startWithPlus","withoutPlus","startWithStar","tokens","split","length","country","phone"],"mappings":"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","file":"index.js","sourcesContent":["import { parseNumber } from 'libphonenumber-js';\n\nconst invalidCharsRegExp = /[^\\d*+#\\-(). ]/;\nconst cleanRegex = /[^\\d*+#]/g;\nconst plusRegex = /\\+/g;\nconst extensionDelimiter = /[*#]/g;\n\nexport default function parse({ input, countryCode = 'US' }) {\n  const result = {\n    input,\n    parsedCountry: null,\n    parsedNumber: null,\n    isValid: true,\n    hasInvalidChars: invalidCharsRegExp.test(input),\n    isExtension: false,\n    isServiceNumber: false,\n    hasPlus: false,\n    phoneNumber: null,\n    extension: null,\n\n  };\n  const cleanInput = (input || '').replace(cleanRegex, '');\n  const startWithPlus = cleanInput[0] === '+';\n  const withoutPlus = cleanInput.replace(plusRegex, '');\n  const startWithStar = withoutPlus[0] === '*';\n  if (startWithPlus && startWithStar) {\n    result.isValid = false;\n  } else {\n    const tokens = withoutPlus.split(extensionDelimiter);\n    if (startWithStar) {\n      if (tokens[1] && tokens[1].length) {\n        result.isServiceNumber = true;\n        result.phoneNumber = `*${tokens[1]}`;\n      } else {\n        result.isValid = false;\n      }\n    } else if (startWithPlus) {\n      if (tokens[0] && tokens[0].length) {\n        result.hasPlus = true;\n        result.phoneNumber = `+${tokens[0]}`;\n        const {\n          country = null,\n          phone = null,\n        } = parseNumber(result.phoneNumber, countryCode);\n        result.parsedCountry = country;\n        result.parsedNumber = phone;\n        if (tokens[1] && tokens[1].length) {\n          result.extension = tokens[1];\n        }\n      } else {\n        result.isValid = false;\n      }\n    } else if (tokens[0] && tokens[0].length) {\n      if (tokens[0].length > 6) {\n        result.phoneNumber = tokens[0];\n        const {\n          country = null,\n          phone = null,\n        } = parseNumber(result.phoneNumber, countryCode);\n        result.parsedCountry = country;\n        result.parsedNumber = phone;\n        if (tokens[1] && tokens[1].length) {\n          result.extension = tokens[1];\n        }\n      } else {\n        result.isExtension = true;\n        result.phoneNumber = tokens[0];\n      }\n    } else {\n      result.isValid = false;\n    }\n  }\n  return result;\n}\n"]}