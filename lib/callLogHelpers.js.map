{"version":3,"sources":["lib/callLogHelpers.js"],"names":["isInbound","isOutbound","isRinging","isMissed","hasRingingCalls","isEnded","hasEndedCalls","isOnHold","isIntermediateCall","isSelfCall","sortBySessionId","sortByStartTime","normalizeStartTime","normalizeFromTo","areTwoLegs","removeInboundRingOutLegs","removeDuplicateIntermediateCalls","removeDuplicateSelfCalls","getName","getPhoneNumberMatches","renderContactName","R","call","direction","callDirections","inbound","outbound","telephonyStatus","telephonyStatuses","ringing","callResultsToMissedMap","HashMap","fromSet","set","callResults","map","key","getValue","missed","hangUp","busy","voicemail","rejected","indexOf","result","calls","find","noCall","terminationType","terminationTypes","final","onHold","intermediate","to","from","phoneNumber","a","b","sessionId","startTime","Date","getTime","Math","abs","action","callActions","phoneCall","ringOutWeb","ringOutPC","ringOutMobile","extensionNumber","output","outbounds","filter","forEach","outboundIndex","findIndex","splice","outboundLeg","inboundLeg","push","concat","resultCalls","indexMap","isIntermediate","sessionid","index","length","isSelf","nameEntities","currentLocale","normalizeNumber","anonymous","selectFieldNames","i18n","getString","nameUnknown","nameMultiple","unknownDisplayText","nameValidEntities","entities","id","isMultiple","name","toMatches","fromMatches","isEmpty","isOutboundCall","isInboundCall","matches"],"mappings":"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","file":"callLogHelpers.js","sourcesContent":["import 'core-js/fn/array/find';\nimport * as R from 'ramda';\nimport { isValidNumber, isSameLocalNumber } from '@ringcentral-integration/phone-number';\n\nimport HashMap from './HashMap';\nimport callActions from '../enums/callActions';\nimport callDirections from '../enums/callDirections';\nimport callResults from '../enums/callResults';\nimport telephonyStatuses from '../enums/telephonyStatuses';\nimport terminationTypes from '../enums/terminationTypes';\nimport i18n from './i18n';\n\n/* call direction helpers */\nexport function isInbound(call = {}) {\n  return call.direction === callDirections.inbound;\n}\n\nexport function isOutbound(call = {}) {\n  return call.direction === callDirections.outbound;\n}\n\n/* status helpers */\nexport function isRinging(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.ringing;\n}\n\nconst callResultsToMissedMap = HashMap.fromSet({\n  set: Object.keys(callResults).map(key => callResults[key]),\n  getValue: result => (\n    [\n      callResults.missed,\n      callResults.hangUp,\n      callResults.busy,\n      callResults.voicemail,\n      callResults.rejected,\n    ].indexOf(result) > -1\n  ),\n});\nexport function isMissed(call = {}) {\n  return !!callResultsToMissedMap[call.result];\n}\n\nexport function hasRingingCalls(calls = []) {\n  return !!calls.find(isRinging);\n}\n\nexport function isEnded(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.noCall &&\n    call.terminationType === terminationTypes.final;\n}\n\nexport function hasEndedCalls(calls) {\n  return !!calls.find(isEnded);\n}\n\nexport function isOnHold(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.onHold;\n}\n\nexport function isIntermediateCall(call = {}) {\n  return call.terminationType === terminationTypes.intermediate;\n}\n\nexport function isSelfCall(call = {}) {\n  if (call.to && call.from) {\n    return call.to.phoneNumber === call.from.phoneNumber;\n  }\n  return false;\n}\n\n/* sort functions */\n\nexport function sortBySessionId(a, b) {\n  if (a.sessionId === b.sessionId) return 0;\n  return a.sessionId > b.sessionId ?\n    1 :\n    -1;\n}\nexport function sortByStartTime(a, b) {\n  if (a.startTime === b.startTime) return 0;\n  return a.startTime > b.startTime ?\n    -1 :\n    1;\n}\n\nexport function normalizeStartTime(call) {\n  const result = {\n    ...call,\n  };\n  if (call.startTime) {\n    result.startTime = (new Date(call.startTime)).getTime();\n  }\n  return result;\n}\n\nexport function normalizeFromTo(call) {\n  return {\n    ...call,\n    from: typeof call.from === 'object' ?\n      call.from :\n      { phoneNumber: call.from },\n    to: typeof call.to === 'object' ?\n      call.to :\n      { phoneNumber: call.to },\n  };\n}\n\n/* ringout leg helpers */\nexport function areTwoLegs(inbound, outbound) {\n  if (isInbound(inbound) && isOutbound(outbound)) {\n    switch (Math.abs(inbound.sessionId - outbound.sessionId)) {\n      case 1000:\n      case 2000:\n      case 3000:\n      case 4000: {\n        // presence\n        if (\n          inbound.from && inbound.to &&\n          outbound.from && outbound.to &&\n          isSameLocalNumber(inbound.from.phoneNumber, outbound.to.phoneNumber) &&\n          isSameLocalNumber(inbound.to.phoneNumber, outbound.from.phoneNumber)\n        ) {\n          return true;\n        }\n        // call-log\n        if (\n          inbound.from && inbound.to &&\n          outbound.from && outbound.to &&\n          inbound.action === callActions.phoneCall &&\n          (\n            outbound.action === callActions.ringOutWeb ||\n            outbound.action === callActions.ringOutPC ||\n            outbound.action === callActions.ringOutMobile\n          ) &&\n          (\n            inbound.from.phoneNumber === outbound.from.phoneNumber ||\n            inbound.from.extensionNumber === outbound.from.extensionNumber\n          ) &&\n          inbound.to.phoneNumber === outbound.to.phoneNumber\n        ) {\n          return true;\n        }\n        break;\n      }\n      default:\n        return false;\n    }\n  }\n  return false;\n}\n\nexport function removeInboundRingOutLegs(calls) {\n  const output = [];\n  const outbounds = calls.filter(isOutbound);\n  calls.filter(isInbound).forEach((inbound) => {\n    const outboundIndex = outbounds.findIndex(call => areTwoLegs(inbound, call));\n    if (outboundIndex > -1) {\n      const outbound = outbounds.splice(outboundIndex, 1)[0];\n\n      if (inbound.action && outbound.action) {\n        // from call-log\n        const call = {\n          ...outbound,\n          outboundLeg: outbound,\n          inboundLeg: inbound,\n          from: {\n            ...inbound.from,\n          },\n          to: {\n            ...inbound.to,\n          },\n          result: inbound.result,\n        };\n        output.push(call);\n      } else {\n        const call = {\n          ...outbound,\n          outboundLeg: outbound,\n          inboundLeg: inbound,\n        };\n        // Handle inboundLeg.from is '+19072028624', but outboundLeg.to is '9072028624'\n        // https://jira.ringcentral.com/browse/RCINT-3127\n        if (\n          isValidNumber(inbound.from && inbound.from.phoneNumber) &&\n          isSameLocalNumber(inbound.from.phoneNumber, outbound.to && outbound.to.phoneNumber)\n        ) {\n          call.to = {\n            ...outbound.to,\n            phoneNumber: inbound.from.phoneNumber,\n          };\n          outbound.to.phoneNumber = inbound.from.phoneNumber;\n        }\n        if (isOnHold(inbound)) {\n          call.telephonyStatus = telephonyStatuses.onHold;\n        }\n        output.push(call);\n      }\n\n      // output.push(outbound);\n    } else {\n      output.push(inbound);\n    }\n  });\n  return output.concat(outbounds);\n}\n\n\nexport function removeDuplicateIntermediateCalls(calls) {\n  const resultCalls = [];\n  const indexMap = {};\n  calls.forEach((call) => {\n    const isIntermediate = isIntermediateCall(call);\n    if (!indexMap[call.sessionId]) {\n      indexMap[call.sessionid] = {\n        index: resultCalls.length,\n        isIntermediate,\n      };\n      resultCalls.push(call);\n    } else if (!isIntermediate) {\n      indexMap[call.sessionId].isIntermediate = false;\n      resultCalls[indexMap[call.sessionId].index] = call;\n    }\n  });\n  return resultCalls;\n}\n\n// there are two active calls with same sessionId when user call self.\nexport function removeDuplicateSelfCalls(calls) {\n  const resultCalls = [];\n  const indexMap = {};\n  calls.forEach((call) => {\n    const isSelf = isSelfCall(call);\n    if (!indexMap[call.sessionId]) {\n      indexMap[call.sessionid] = {\n        index: resultCalls.length,\n        isSelf,\n      };\n      resultCalls.push(call);\n    } else if (!isSelf) {\n      indexMap[call.sessionId].isSelf = false;\n      resultCalls[indexMap[call.sessionId].index] = call;\n    }\n  });\n  return resultCalls;\n}\n// from zendesk\nexport function getName({\n  nameEntities = [],\n  currentLocale,\n  normalizeNumber,\n  anonymous = false,\n} = {}) {\n  const selectFieldNames = {\n    anonymous: i18n.getString('anonymous', currentLocale),\n    nameUnknown: i18n.getString('nameUnknown', currentLocale),\n    nameMultiple: i18n.getString('nameMultiple', currentLocale),\n  };\n  if (anonymous) {\n    return selectFieldNames.anonymous;\n  }\n  const unknownDisplayText = typeof normalizeNumber === 'undefined' ?\n    selectFieldNames.nameUnknown :\n    normalizeNumber;\n\n  if (!nameEntities) {\n    return unknownDisplayText;\n  }\n  const nameValidEntities = nameEntities.filter(entities => entities && entities.id);\n  if (nameValidEntities.length === 0) {\n    return unknownDisplayText;\n  }\n  const isMultiple = nameValidEntities.length > 1;\n  return (\n    isMultiple ? (normalizeNumber || selectFieldNames.nameMultiple) : nameValidEntities[0].name\n  );\n}\n// Get phone number and matches.\nexport function getPhoneNumberMatches(call = {}) {\n  const {\n    to = {},\n    from = {},\n    sessionId,\n    toMatches,\n    fromMatches\n  } = call;\n  if (R.isEmpty(call)) {\n    return {};\n  }\n  const isOutboundCall = isOutbound(call);\n  const isInboundCall = isInbound(call);\n  let phoneNumber = null;\n  let matches = null;\n  if (isOutboundCall) {\n    phoneNumber = to.phoneNumber || to.extensionNumber;\n    matches = toMatches;\n  } else if (isInboundCall) {\n    phoneNumber = from.phoneNumber || from.extensionNumber;\n    matches = fromMatches;\n  }\n  // if (!phoneNumber || !matches) {\n  //   console.warn(`Call sessionId: ${sessionId} is abnormal data.`);\n  // }\n  return {\n    phoneNumber,\n    matches\n  };\n}\n// Currently for zendesk call-log contact show\nexport function renderContactName (call, currentLocale) {\n  const { phoneNumber, matches } = getPhoneNumberMatches(call);\n  return getName({\n    nameEntities: matches,\n    currentLocale: currentLocale,\n    normalizeNumber: phoneNumber,\n    anonymous: !phoneNumber\n  });\n}"]}