{"version":3,"sources":["lib/OAuthBase/index.js"],"names":["OAuthBase","deps","dep","optional","alert","auth","brand","locale","tabManager","redirectUri","options","_alert","ensureExist","_auth","_brand","_locale","_tabManager","_redirectUri","_reducer","actionTypes","pending","ready","store","dispatch","type","init","initSuccess","callbackUri","refresh","query","_refreshWithCallbackQuery","_loginWithCallbackQuery","console","error","message","authMessages","accessDenied","internalError","danger","payload","code","access_token","login","accessToken","expiresIn","expires_in","endpointId","endpoint_id","tokenType","token_type","refreshImplicitToken","enumMap","baseActionTypes","prefix","name","extendedQuery","qs","stringify","force","localeId","currentLocale","ui_options","getLoginUrl","brandId","id","state","btoa","Date","now","display","implicit","isImplicit","prompt","status","oAuthReady","url","resolve","window","location","href","RcModule","required","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from 'ringcentral-integration/lib/RcModule';\nimport { prefixEnum } from 'ringcentral-integration/lib/Enum';\nimport { Module } from 'ringcentral-integration/lib/di';\nimport ensureExist from 'ringcentral-integration/lib/ensureExist';\nimport proxify from 'ringcentral-integration/lib/proxy/proxify';\nimport authMessages from 'ringcentral-integration/modules/Auth/authMessages';\nimport required from 'ringcentral-integration/lib/required';\nimport qs from 'qs';\nimport url from 'url';\n\nimport parseCallbackUri from '../parseCallbackUri';\nimport baseActionTypes from './baseActionTypes';\nimport getOAuthBaseReducer from './getOAuthBaseReducer';\nimport oAuthMessages from './oAuthMessages';\n\n@Module({\n  deps: [\n    'Auth',\n    'Alert',\n    'Locale',\n    'Brand',\n    { dep: 'TabManager', optional: true },\n  ],\n})\nexport default class OAuthBase extends RcModule {\n  constructor({\n    alert,\n    auth,\n    brand,\n    locale,\n    tabManager,\n    redirectUri,\n    ...options\n  }) {\n    super({\n      ...options,\n    });\n    this._alert = this::ensureExist(alert, 'alert');\n    this._auth = this::ensureExist(auth, 'auth');\n    this._brand = this::ensureExist(brand, 'brand');\n    this._locale = this::ensureExist(locale, 'locale');\n    this._tabManager = tabManager;\n    this._redirectUri = this::ensureExist(redirectUri, 'redirectUri');\n    this._reducer = getOAuthBaseReducer(this.actionTypes);\n  }\n\n  get _actionTypes() {\n    return prefixEnum({ enumMap: baseActionTypes, prefix: this.name });\n  }\n\n  @required\n  get name() {\n    /* require implementation in descendent */\n    return null;\n  }\n\n  _onStateChange() {\n    if (\n      this.pending &&\n      (\n        this._auth.ready &&\n        this._locale.ready &&\n        this._alert.ready &&\n        (!this._tabManager || this._tabManager.ready)\n      )\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    }\n  }\n\n  @proxify\n  async _handleCallbackUri(callbackUri, refresh = false) {\n    try {\n      const query = parseCallbackUri(callbackUri);\n      if (refresh) {\n        await this._refreshWithCallbackQuery(query);\n      } else {\n        await this._loginWithCallbackQuery(query);\n      }\n    } catch (error) {\n      console.error('oauth error: ', error);\n      let message;\n      switch (error.message) {\n        case 'invalid_request':\n        case 'unauthorized_client':\n        case 'access_denied':\n        case 'unsupported_response_type':\n        case 'invalid_scope':\n          message = authMessages.accessDenied;\n          break;\n        case 'server_error':\n        case 'temporarily_unavailable':\n        default:\n          message = authMessages.internalError;\n          break;\n      }\n      this._alert.danger({\n        message,\n        payload: error,\n      });\n    }\n  }\n\n  async _loginWithCallbackQuery(query) {\n    if (!(query.code || query.access_token)) {\n      return;\n    }\n    await this._auth.login({\n      code: query.code,\n      accessToken: query.access_token,\n      expiresIn: query.expires_in,\n      endpointId: query.endpoint_id,\n      redirectUri: this.redirectUri,\n      tokenType: query.token_type,\n    });\n  }\n\n  async _refreshWithCallbackQuery(query) {\n    if (!query.access_token) {\n      return;\n    }\n    await this._auth.refreshImplicitToken({\n      tokenType: query.token_type,\n      accessToken: query.access_token,\n      expiresIn: query.expires_in,\n      endpointId: query.endpoint_id,\n    });\n  }\n\n  @required\n  async prepareOAuth() {}\n\n  @required\n  async destroyOAuth() {}\n\n  @required\n  openOAuthPage() {}\n\n\n  get oAuthUri() {\n    const extendedQuery = qs.stringify({\n      force: true,\n      localeId: this._locale.currentLocale,\n      ui_options: 'hide_remember_me hide_tos',\n    });\n    return `${this._auth.getLoginUrl({\n      redirectUri: this.redirectUri,\n      brandId: this._brand.id,\n      state: btoa(Date.now()),\n      display: 'page',\n      implicit: this._auth.isImplicit,\n    })}&${extendedQuery}`;\n  }\n\n  get implictRefreshOAuthUri() {\n    return `${this._auth.getLoginUrl({\n      redirectUri: this.redirectUri,\n      brandId: this._brand.id,\n      state: btoa(Date.now()),\n      display: 'page',\n      prompt: 'none',\n      implicit: this._auth.isImplicit,\n    })}`;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get oAuthReady() {\n    return this.state.oAuthReady;\n  }\n\n  get redirectUri() {\n    return url.resolve(window.location.href, this._redirectUri);\n  }\n}\n"]}