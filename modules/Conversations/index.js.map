{"version":3,"sources":["modules/Conversations/index.js"],"names":["getEarliestTime","messages","newTime","Date","now","forEach","message","creationTime","getTime","DEFAULT_PER_PAGE","DEFAULT_DAY_SPAN","Conversations","deps","dep","optional","alert","auth","client","messageSender","extensionInfo","messageStore","rolesAndPermissions","contactMatcher","conversationLogger","perPage","daySpan","enableLoadOldMessages","options","actionTypes","_auth","ensureExist","_alert","_client","_messageSender","_extensionInfo","_messageStore","_rolesAndPermissions","_contactMatcher","_conversationLogger","_reducer","_promise","_lastProcessedNumbers","_perPage","_daySpan","_olderDataExsited","_olderMessagesExsited","_enableLoadOldMessages","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","store","subscribe","_onStateChange","_shouldInit","_init","_shouldReset","_reset","triggerMatch","loggedIn","pending","dispatch","type","init","initSuccess","allConversations","length","_hasPermission","fetchOldConversations","resetSuccess","input","updateSearchInput","typeFilter","updateTypeFilter","pagingConversations","loadNextPage","loadingOldConversations","fetchOldConverstaions","dateFrom","setDate","getDate","dateTo","earliestTime","currentPage","params","distinctConversations","toISOString","messageTypes","text","messageType","sms","pager","all","account","extension","list","records","fetchOldConverstaionsSuccess","fetchOldConverstaionsError","filteredConversations","increaseCurrentPage","effectiveSearchString","resetCurrentPage","conversationId","currentConversationId","updateCurrentConversationId","loadingOldMessages","fetchOldMessages","currentConversation","fetchOldMessagesSuccess","fetchOldMessagesError","ttlConfig","messageSenderMessages","noAreaCode","ttl","warning","_alertWarning","textTooLong","updateMessageText","reply","send","fromNumber","_getFromNumber","toNumbers","_getToNumbers","replyOnMessageId","_getReplyOnMessageId","responses","pushMessage","replySuccess","removeMessageText","_onReplyError","messageList","lastMessage","id","senderNumber","extensionNumber","phoneNumber","recipients","map","recipient","conversationStore","deleteConversationMessages","conversation","find","c","deleteCoversation","deleteMessageApi","deleteConversation","console","error","state","status","searchInput","oldConversations","fetchConversationsStatus","fetchMessagesStatus","oldMessages","fetching","conversationStatus","pushing","hasReadMessagesPermission","RcModule","proxify","getter","conversations","newConversations","conversationMap","pushConversation","push","output","numberMap","addIfNotExist","number","from","to","toNumber","toPhoneNumber","filter","messageIsTextMessage","voiceMail","messageIsVoicemail","fax","messageIsFax","readTextPermissions","voicemailPermissions","readFaxPermissions","typeFilteredConversations","dataMapping","loggingMap","accessToken","contactMapping","conversationLogMapping","self","correspondents","selfNumber","selfMatches","correspondentMatches","reduce","matches","contact","concat","conversationLogId","getConversationLogId","isLogging","conversationMatches","voicemailAttachment","faxAttachment","unreadCounts","lastMatchedCorrespondentEntity","getLastMatchedCorrespondentEntity","formatedConversations","searchResults","cleanRegex","searchString","toLowerCase","searchNumber","replace","cleanedNumber","indexOf","matchOrder","entity","name","subject","matchedMessage","item","sort","sortSearchResults","pageNumber","lastIndex","slice","allMessages","reverse","myExtensionNumber","myNumber","messageTexts","res","msg"],"mappings":"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","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\n\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport getter from '../../lib/getter';\nimport ensureExist from '../../lib/ensureExist';\nimport proxify from '../../lib/proxy/proxify';\nimport messageTypes from '../../enums/messageTypes';\nimport cleanNumber from '../../lib/cleanNumber';\nimport messageSenderMessages from '../MessageSender/messageSenderMessages';\n\nimport {\n  getNumbersFromMessage,\n  sortSearchResults,\n  messageIsTextMessage,\n  messageIsVoicemail,\n  getVoicemailAttachment,\n  getFaxAttachment,\n  messageIsFax,\n  getMyNumberFromMessage,\n  getRecipientNumbersFromMessage,\n  messageIsUnread,\n} from '../../lib/messageHelper';\n\nimport actionTypes from './actionTypes';\nimport getReducer from './getReducer';\nimport status from './status';\n\nfunction getEarliestTime(messages) {\n  let newTime = Date.now();\n  messages.forEach((message) => {\n    const creationTime = (new Date(message.creationTime)).getTime();\n    if (creationTime < newTime) {\n      newTime = creationTime;\n    }\n  });\n  return newTime;\n}\n\nconst DEFAULT_PER_PAGE = 20;\nconst DEFAULT_DAY_SPAN = 90;\n\n@Module({\n  deps: [\n    'Alert',\n    'Auth',\n    'Client',\n    'MessageSender',\n    'ExtensionInfo',\n    'MessageStore',\n    'RolesAndPermissions',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ConversationLogger', optional: true },\n    { dep: 'ConversationsOptions', optional: true }\n  ],\n})\nexport default class Conversations extends RcModule {\n  constructor({\n    alert,\n    auth,\n    client,\n    messageSender,\n    extensionInfo,\n    messageStore,\n    rolesAndPermissions,\n    contactMatcher,\n    conversationLogger,\n    perPage = DEFAULT_PER_PAGE,\n    daySpan = DEFAULT_DAY_SPAN,\n    enableLoadOldMessages = false, // disable old message by default\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = this::ensureExist(auth, 'auth');\n    this._alert = this::ensureExist(alert, 'alert');\n    this._client = this::ensureExist(client, 'client');\n    this._messageSender = this::ensureExist(messageSender, 'messageSender');\n    this._extensionInfo = this::ensureExist(extensionInfo, 'extensionInfo');\n    this._messageStore = this::ensureExist(messageStore, 'messageStore');\n    this._rolesAndPermissions =\n      this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._contactMatcher = contactMatcher;\n    this._conversationLogger = conversationLogger;\n\n    this._reducer = getReducer(this.actionTypes);\n\n    this._promise = null;\n    this._lastProcessedNumbers = null;\n    this._perPage = perPage;\n    this._daySpan = daySpan;\n    this._olderDataExsited = true;\n    this._olderMessagesExsited = true;\n    this._enableLoadOldMessages = enableLoadOldMessages;\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () => (\n          this._messageStore.ready\n        ),\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._init();\n    } else if (this._shouldReset()) {\n      this._reset();\n    } else if (this._lastProcessedNumbers !== this.uniqueNumbers) {\n      this._lastProcessedNumbers = this.uniqueNumbers;\n      if (this._contactMatcher) {\n        this._contactMatcher.triggerMatch();\n      }\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loggedIn &&\n      this._extensionInfo.ready &&\n      this._messageSender.ready &&\n      this._messageStore.ready &&\n      this._rolesAndPermissions.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._conversationLogger || this._conversationLogger.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._auth.loggedIn ||\n        !this._extensionInfo.ready ||\n        !this._messageSender.ready ||\n        !this._rolesAndPermissions ||\n        !this._messageStore.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._conversationLogger && !this._conversationLogger.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _init() {\n    this.store.dispatch({\n      type: this.actionTypes.init,\n    });\n    if (this._contactMatcher) {\n      this._contactMatcher.triggerMatch();\n    }\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n    if (\n      this.allConversations.length <= this._perPage &&\n      this._enableLoadOldMessages &&\n      this._hasPermission\n    ) {\n      this.fetchOldConversations();\n    }\n  }\n\n  _reset() {\n    this._lastProcessedNumbers = null;\n    this._olderDataExsited = true;\n    this._olderMessagesExsited = true;\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  async updateSearchInput(input) {\n    this.store.dispatch({\n      type: this.actionTypes.updateSearchInput,\n      input,\n    });\n  }\n\n  @proxify\n  async updateTypeFilter(type) {\n    if (this.typeFilter === type) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.updateTypeFilter,\n      typeFilter: type,\n    });\n    this._olderDataExsited = true;\n    this._olderMessagesExsited = true;\n    if (this.pagingConversations.length <= this._perPage) {\n      this.loadNextPage();\n    }\n  }\n\n  @proxify\n  async fetchOldConversations() {\n    if (!this._olderDataExsited) {\n      return;\n    }\n    if (this.loadingOldConversations) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.fetchOldConverstaions,\n    });\n    const dateFrom = new Date();\n    dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n    const dateTo = new Date(this.earliestTime);\n    if (dateTo.getTime() < dateFrom.getTime()) {\n      dateFrom.setDate(dateFrom.getDate() - 1);\n    }\n    const typeFilter = this.typeFilter;\n    const currentPage = this.currentPage;\n    const params = {\n      distinctConversations: true,\n      perPage: this._perPage,\n      dateFrom: dateFrom.toISOString(),\n      dateTo: dateTo.toISOString(),\n    };\n    if (typeFilter === messageTypes.text) {\n      params.messageType = [messageTypes.sms, messageTypes.pager];\n    } else if (typeFilter && typeFilter !== '' && typeFilter !== messageTypes.all) {\n      params.messageType = typeFilter;\n    }\n    try {\n      const { records } = await this._client\n        .account()\n        .extension()\n        .messageStore()\n        .list(params);\n      this._olderDataExsited = records.length === this._perPage;\n      if (typeFilter === this.typeFilter && currentPage === this.currentPage) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldConverstaionsSuccess,\n          records,\n        });\n      }\n    } catch (e) {\n      if (typeFilter === this.typeFilter && currentPage === this.currentPage) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldConverstaionsError\n        });\n      }\n    }\n  }\n\n  @proxify\n  async loadNextPage() {\n    const currentPage = this.currentPage;\n    if ((currentPage + 1) * this._perPage <= this.filteredConversations.length) {\n      this.store.dispatch({\n        type: this.actionTypes.increaseCurrentPage,\n      });\n      return;\n    }\n    if (this.effectiveSearchString !== '') {\n      return;\n    }\n    if (!this._enableLoadOldMessages || !this._hasPermission) {\n      return;\n    }\n    await this.fetchOldConversations();\n  }\n\n  @proxify\n  async resetCurrentPage() {\n    this.store.dispatch({\n      type: this.actionTypes.resetCurrentPage,\n    });\n  }\n\n  @proxify\n  async loadConversation(conversationId) {\n    if (conversationId === this.currentConversationId) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.updateCurrentConversationId,\n      conversationId,\n    });\n  }\n\n  @proxify\n  async unloadConversation() {\n    this.store.dispatch({\n      type: this.actionTypes.updateCurrentConversationId,\n      conversationId: null,\n    });\n    this._olderMessagesExsited = true;\n  }\n\n  @proxify\n  async fetchOldMessages(perPage = this._perPage) {\n    if (!this._enableLoadOldMessages) {\n      return;\n    }\n    if (!this._hasPermission) {\n      return;\n    }\n    if (!this._olderMessagesExsited) {\n      return;\n    }\n    if (this.loadingOldMessages) {\n      return;\n    }\n    if (!this.currentConversationId) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.fetchOldMessages,\n    });\n    const conversationId = this.currentConversationId;\n    const dateFrom = new Date();\n    dateFrom.setDate(dateFrom.getDate() - this._daySpan);\n    const earliestTime = getEarliestTime(this.currentConversation.messages);\n    const dateTo = new Date(earliestTime);\n    if (dateTo.getTime() < dateFrom.getTime()) {\n      dateFrom.setDate(dateFrom.getDate() - 1);\n    }\n    const params = {\n      conversationId,\n      perPage,\n      dateFrom: dateFrom.toISOString(),\n      dateTo: dateTo.toISOString(),\n    };\n    try {\n      const { records } = await this._client\n        .account()\n        .extension()\n        .messageStore()\n        .list(params);\n      this._olderMessagesExsited = records.length === perPage;\n      if (conversationId === this.currentConversationId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldMessagesSuccess,\n          records,\n        });\n      }\n    } catch (e) {\n      if (conversationId === this.currentConversationId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchOldMessagesError\n        });\n      }\n    }\n  }\n\n  _alertWarning(message) {\n    if (message) {\n      const ttlConfig =\n        message !== messageSenderMessages.noAreaCode ? { ttl: 0 } : null;\n      this._alert.warning({\n        message,\n        ...ttlConfig,\n      });\n      return true;\n    }\n    return false;\n  }\n\n  @proxify\n  async updateMessageText(text) {\n    if (text.length > 1000) {\n      return this._alertWarning(messageSenderMessages.textTooLong);\n    }\n    return this.store.dispatch({\n      type: this.actionTypes.updateMessageText,\n      text,\n      conversationId: this.currentConversationId,\n    });\n  }\n\n  @proxify\n  async replyToReceivers(text) {\n    this.store.dispatch({\n      type: this.actionTypes.reply,\n    });\n    try {\n      const responses = await this._messageSender.send({\n        fromNumber: this._getFromNumber(),\n        toNumbers: this._getToNumbers(),\n        text,\n        replyOnMessageId: this._getReplyOnMessageId(),\n      });\n      if (responses && responses[0]) {\n        this._messageStore.pushMessage(responses[0]);\n        this.store.dispatch({\n          type: this.actionTypes.replySuccess,\n        });\n        this.store.dispatch({\n          type: this.actionTypes.removeMessageText,\n          conversationId: this.currentConversationId,\n        });\n        return responses[0];\n      }\n      this._onReplyError();\n      return null;\n    } catch (error) {\n      this._onReplyError();\n      throw error;\n    }\n  }\n\n  _getReplyOnMessageId() {\n    const messageList = this.currentConversation.messages;\n    const lastMessage =\n      messageList &&\n      messageList.length > 0 &&\n      messageList[messageList.length - 1];\n    if (lastMessage && lastMessage.id) {\n      return lastMessage.id;\n    }\n    return null;\n  }\n\n  _getFromNumber() {\n    const senderNumber = this.currentConversation.senderNumber;\n    if (!senderNumber) {\n      return null;\n    }\n    return senderNumber.extensionNumber || senderNumber.phoneNumber;\n  }\n\n  _getToNumbers() {\n    const recipients = this.currentConversation.recipients;\n    return recipients.map(\n      recipient => recipient.extensionNumber || recipient.phoneNumber,\n    );\n  }\n\n  @proxify\n  async deleteCoversation(conversationId) {\n    if (!conversationId) {\n      return;\n    }\n    if (this._messageStore.conversationStore[conversationId]) {\n      await this._messageStore.deleteConversationMessages(conversationId);\n      return;\n    }\n    const conversation = this.allConversations.find(\n      c => c.conversationId === conversationId\n    );\n    if (!conversation) {\n      return;\n    }\n    if (messageIsTextMessage(conversation)) {\n      await this._messageStore.deleteCoversation(conversationId);\n      return;\n    }\n    try {\n      await this._messageStore.deleteMessageApi(conversationId);\n      this.store.dispatch({\n        type: this.actionTypes.deleteConversation,\n        conversationId,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  @getter\n  allConversations = createSelector(\n    () => this._messageStore.allConversations,\n    () => this.oldConversations,\n    (conversations, oldConversations) => {\n      const newConversations = [];\n      const conversationMap = {};\n      const pushConversation = (c) => {\n        if (conversationMap[c.id]) {\n          return;\n        }\n        newConversations.push(c);\n        conversationMap[c.id] = 1;\n      };\n      conversations.forEach(pushConversation);\n      oldConversations.forEach(pushConversation);\n      return newConversations;\n    }\n  )\n\n  @getter\n  uniqueNumbers = createSelector(\n    () => this.allConversations,\n    (conversations) => {\n      const output = [];\n      const numberMap = {};\n      function addIfNotExist(number) {\n        if (number && !numberMap[number]) {\n          output.push(number);\n          numberMap[number] = true;\n        }\n      }\n      conversations.forEach((message) => {\n        if (message.from) {\n          const fromNumber = message.from.phoneNumber || message.from.extensionNumber;\n          addIfNotExist(fromNumber);\n        }\n        if (message.to && message.to.length > 0) {\n          message.to.forEach((toNumber) => {\n            if (!toNumber) {\n              return;\n            }\n            const toPhoneNumber = toNumber.phoneNumber || toNumber.extensionNumber;\n            addIfNotExist(toPhoneNumber);\n          });\n        }\n      });\n      return output;\n    }\n  )\n\n  @getter\n  effectiveSearchString = createSelector(\n    () => this.state.searchInput,\n    (input) => {\n      if (input.length >= 3) return input;\n      return '';\n    }\n  )\n\n  @getter\n  typeFilteredConversations = createSelector(\n    () => this.allConversations,\n    () => this.typeFilter,\n    (allConversations, typeFilter) => {\n      switch (typeFilter) {\n        case messageTypes.text:\n          return allConversations.filter(messageIsTextMessage);\n        case messageTypes.voiceMail:\n          return allConversations.filter(messageIsVoicemail);\n        case messageTypes.fax:\n          return allConversations.filter(messageIsFax);\n        default:\n          return allConversations.filter(\n            conversation => (\n              (\n                this._rolesAndPermissions.readTextPermissions ||\n                !messageIsTextMessage(conversation)\n              ) &&\n              (\n                this._rolesAndPermissions.voicemailPermissions ||\n                !messageIsVoicemail(conversation)\n              ) &&\n              (\n                this._rolesAndPermissions.readFaxPermissions ||\n                !messageIsFax(conversation)\n              )\n            )\n          );\n      }\n    }\n  );\n\n  @getter\n  formatedConversations = createSelector(\n    () => this.typeFilteredConversations,\n    () => this._extensionInfo.extensionNumber,\n    () => this._contactMatcher && this._contactMatcher.dataMapping,\n    () => this._conversationLogger && this._conversationLogger.loggingMap,\n    () => this._conversationLogger && this._conversationLogger.dataMapping,\n    () => this._auth.accessToken,\n    (\n      conversations,\n      extensionNumber,\n      contactMapping = {},\n      loggingMap = {},\n      conversationLogMapping = {},\n      accessToken,\n    ) => (\n      conversations.map((message) => {\n        const {\n          self,\n          correspondents,\n        } = getNumbersFromMessage({ extensionNumber, message });\n        const selfNumber = self && (self.phoneNumber || self.extensionNumber);\n        const selfMatches = (selfNumber && contactMapping[selfNumber]) || [];\n        const correspondentMatches = correspondents.reduce((matches, contact) => {\n          const number = contact && (contact.phoneNumber || contact.extensionNumber);\n          return number && contactMapping[number] && contactMapping[number].length ?\n            matches.concat(contactMapping[number]) :\n            matches;\n        }, []);\n        const conversationLogId = this._conversationLogger ?\n          this._conversationLogger.getConversationLogId(message) :\n          null;\n        const isLogging = !!(conversationLogId && loggingMap[conversationLogId]);\n        const conversationMatches = conversationLogMapping[conversationLogId] || [];\n        let voicemailAttachment = null;\n        if (messageIsVoicemail(message)) {\n          voicemailAttachment = getVoicemailAttachment(message, accessToken);\n        }\n        let faxAttachment = null;\n        if (messageIsFax(message)) {\n          faxAttachment = getFaxAttachment(message, accessToken);\n        }\n        let unreadCounts = message.unreadCounts;\n        if (typeof unreadCounts === 'undefined') {\n          unreadCounts = messageIsUnread(message) ? 1 : 0;\n        }\n        return {\n          ...message,\n          unreadCounts,\n          self,\n          selfMatches,\n          correspondents,\n          correspondentMatches,\n          conversationLogId,\n          isLogging,\n          conversationMatches,\n          voicemailAttachment,\n          faxAttachment,\n          lastMatchedCorrespondentEntity: (\n            this._conversationLogger &&\n              this._conversationLogger.getLastMatchedCorrespondentEntity(message)\n          ) || null,\n        };\n      })\n    ),\n  )\n\n  @getter\n  filteredConversations = createSelector(\n    () => this.formatedConversations,\n    () => this.effectiveSearchString,\n    (conversations, effectiveSearchString) => {\n      if (effectiveSearchString === '') {\n        return conversations;\n      }\n      const searchResults = [];\n      const cleanRegex = /[^\\d*+#\\s]/g;\n      const searchString = effectiveSearchString.toLowerCase();\n      const searchNumber = effectiveSearchString.replace(cleanRegex, '');\n      conversations.forEach((message) => {\n        if (searchNumber === effectiveSearchString) {\n          const cleanedNumber = cleanNumber(effectiveSearchString);\n          if (\n            message.correspondents.find(\n              contact => (\n                cleanNumber(contact.phoneNumber || contact.extensionNumber || '')\n                  .indexOf(cleanedNumber) > -1\n              )\n            )\n          ) {\n            // match by phoneNumber or extensionNumber\n            searchResults.push({\n              ...message,\n              matchOrder: 0,\n            });\n            return;\n          }\n        }\n        if (message.correspondentMatches.length) {\n          if (\n            message.correspondentMatches.find(entity => (\n              (entity.name || '').toLowerCase().indexOf(searchString) > -1\n            ))\n          ) {\n            // match by entity's name\n            searchResults.push({\n              ...message,\n              matchOrder: 0,\n            });\n            return;\n          }\n        } else if (message.correspondents.find(contact => (\n          (contact.name || '').toLowerCase().indexOf(searchString) > -1\n        ))) {\n          searchResults.push({\n            ...message,\n            matchOrder: 0,\n          });\n          return;\n        }\n\n        // try match messages of the same conversation\n        if ((message.subject || '').toLowerCase().indexOf(searchString) > -1) {\n          searchResults.push({\n            ...message,\n            matchOrder: 1,\n          });\n          return;\n        }\n        const messageList = this._messageStore.conversationStore[message.conversationId] || [];\n        const matchedMessage = messageList.find(item => (\n          (item.subject || '').toLowerCase().indexOf(searchString) > -1\n        ));\n        if (matchedMessage) {\n          searchResults.push({\n            ...message,\n            matchedMessage,\n            matchOrder: 1,\n          });\n        }\n      });\n      return searchResults.sort(sortSearchResults);\n    },\n  )\n\n  @getter\n  pagingConversations = createSelector(\n    () => this.filteredConversations,\n    () => this.currentPage,\n    (conversations, pageNumber) => {\n      const lastIndex = (pageNumber * this._perPage) - 1;\n      return conversations.slice(0, lastIndex);\n    }\n  )\n\n  @getter\n  earliestTime = createSelector(\n    () => this.typeFilteredConversations,\n    getEarliestTime,\n  )\n\n  @getter\n  currentConversation = createSelector(\n    () => this.currentConversationId,\n    () => this.oldMessages,\n    () => this._messageStore.conversationStore,\n    () => this.formatedConversations,\n    (conversationId, oldMessages, conversationStore, conversations) => {\n      const conversation = conversations.find(\n        c => c.conversationId === conversationId\n      );\n      const messages = [].concat(conversationStore[conversationId] || []);\n      const currentConversation = {\n        ...conversation\n      };\n      const allMessages = messages.concat(oldMessages).slice();\n      currentConversation.messages = allMessages.reverse();\n      currentConversation.senderNumber = getMyNumberFromMessage({\n        message: conversation,\n        myExtensionNumber: this._extensionInfo.extensionNumber,\n      });\n      currentConversation.recipients = getRecipientNumbersFromMessage({\n        message: conversation,\n        myNumber: currentConversation.senderNumber,\n      });\n      return currentConversation;\n    }\n  )\n\n  @getter\n  messageText = createSelector(\n    () => this.state.messageTexts,\n    () => this.currentConversationId,\n    (messageTexts, conversationId) => {\n      const res = messageTexts.find(\n        msg => typeof msg === 'object' && msg.conversationId === conversationId,\n      );\n      return res ? res.text : '';\n    },\n  );\n\n  get status() {\n    return this.state.status;\n  }\n\n  get searchInput() {\n    return this.state.searchInput;\n  }\n\n  get typeFilter() {\n    return this.state.typeFilter;\n  }\n\n  get currentPage() {\n    return this.state.currentPage;\n  }\n\n  get oldConversations() {\n    return this.state.oldConversations;\n  }\n\n  get fetchConversationsStatus() {\n    return this.state.fetchConversationsStatus;\n  }\n\n  get currentConversationId() {\n    return this.state.currentConversationId;\n  }\n\n  get fetchMessagesStatus() {\n    return this.state.fetchMessagesStatus;\n  }\n\n  get oldMessages() {\n    return this.state.oldMessages;\n  }\n\n  get loadingOldConversations() {\n    return this.fetchConversationsStatus === status.fetching;\n  }\n\n  get loadingOldMessages() {\n    return this.fetchMessagesStatus === status.fetching;\n  }\n\n  get pushing() {\n    return this.state.conversationStatus === status.pushing;\n  }\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.hasReadMessagesPermission;\n  }\n}\n"]}