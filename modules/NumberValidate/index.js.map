{"version":3,"sources":["modules/NumberValidate/index.js"],"names":["NumberValidate","deps","brand","client","accountExtension","regionSettings","accountInfo","options","actionTypes","numberValidateActionTypes","_brand","_client","_accountExtension","_regionSettings","_accountInfo","_reducer","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","ready","dispatch","type","initSuccess","resetSuccess","phoneNumber","countryCode","areaCode","number","hasInvalidChars","hasPlus","isServiceNumber","id","length","special","extensionNumber","isAvailableExtension","companyNumber","normalizedCompanyNumber","mainCompanyNumber","phoneNumbers","validateResult","validateFormat","result","validateWithNumberParser","validatedNumbers","errors","map","isNoToNumber","push","isNoAreaCode","_numberParser","pasedNumers","validatedPhoneNumbers","_isSpecial","originalString","isNotAnExtension","numbers","homeCountry","normalizedNumbers","_numberParserApi","response","international","country","isoCode","originalStrings","numberParser","parse","post","state","status","moduleStatuses","RcModule","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport isBlank from '../../lib/isBlank';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport parseNumber from '../../lib/parseNumber';\nimport proxify from '../../lib/proxy/proxify';\n\nimport numberValidateActionTypes from './numberValidateActionTypes';\nimport getNumberValidateReducer from './getNumberValidateReducer';\n\n/**\n * @class\n * @description Validate number with number parser api\n */\n@Module({\n  deps: ['Brand', 'Client', 'AccountExtension', 'RegionSettings', 'AccountInfo']\n})\nexport default class NumberValidate extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {AccountExtension} params.accountExtension - accountExtension module instance\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   * @param {AccountInfo} params.accountInfo - accountInfo module instance\n   */\n  constructor({\n    brand,\n    client,\n    accountExtension,\n    regionSettings,\n    accountInfo,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: numberValidateActionTypes,\n    });\n    this._brand = brand;\n    this._client = client;\n    this._accountExtension = accountExtension;\n    this._regionSettings = regionSettings;\n    this._accountInfo = accountInfo;\n    this._reducer = getNumberValidateReducer(this.actionTypes);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._brand.ready &&\n      this._regionSettings.ready &&\n      this._accountExtension.ready &&\n      this._accountInfo.ready &&\n      !this.ready\n    );\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._brand.ready ||\n        !this._accountInfo.ready ||\n        !this._regionSettings.ready ||\n        !this._accountExtension.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  isNoToNumber(phoneNumber) {\n    if (isBlank(phoneNumber)) {\n      return true;\n    }\n    const {\n      number,\n      hasInvalidChars,\n    } = parseNumber({\n      phoneNumber,\n      countryCode: this._regionSettings.countryCode,\n      areaCode: this._regionSettings.areaCode,\n    });\n    if (hasInvalidChars || number === '') {\n      return true;\n    }\n    return false;\n  }\n\n  isNoAreaCode(phoneNumber) {\n    const {\n      hasPlus,\n      number,\n      isServiceNumber\n    } = parseNumber({\n      phoneNumber,\n      countryCode: this._regionSettings.countryCode,\n      areaCode: this._regionSettings.areaCode,\n    });\n    const {\n      countryCode,\n      areaCode,\n    } = this._regionSettings;\n    if (\n      this._brand.id === '1210' &&\n      !isServiceNumber &&\n      !hasPlus &&\n      number.length === 7 &&\n      (countryCode === 'CA' || countryCode === 'US') &&\n      areaCode === ''\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  _isSpecial(phoneNumber) {\n    if (phoneNumber && phoneNumber.special) {\n      return true;\n    }\n    return false;\n  }\n\n  isNotAnExtension(extensionNumber) {\n    if (\n      extensionNumber &&\n      extensionNumber.length <= 6 &&\n      !this._accountExtension.isAvailableExtension(extensionNumber)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  isCompanyExtension(companyNumber, extensionNumber) {\n    const {\n      countryCode,\n      areaCode,\n    } = this._regionSettings;\n    const normalizedCompanyNumber\n      = normalizeNumber({ phoneNumber: companyNumber, countryCode, areaCode });\n    if (normalizedCompanyNumber !== this._accountInfo.mainCompanyNumber) {\n      return false;\n    }\n    return this._accountExtension.isAvailableExtension(extensionNumber);\n  }\n\n  @proxify\n  async validateNumbers(phoneNumbers) {\n    const validateResult = this.validateFormat(phoneNumbers);\n    if (!validateResult.result) {\n      return validateResult;\n    }\n    const validatedNumbers = await this.validateWithNumberParser(phoneNumbers);\n    return validatedNumbers;\n  }\n\n  validateFormat(phoneNumbers) {\n    const errors = [];\n    phoneNumbers.map((phoneNumber) => {\n      if (this.isNoToNumber(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noToNumber' });\n        return null;\n      }\n      if (this.isNoAreaCode(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noAreaCode' });\n      }\n      return null;\n    });\n    return {\n      result: (errors.length === 0),\n      errors\n    };\n  }\n\n  @proxify\n  async validateWithNumberParser(phoneNumbers) {\n    const pasedNumers = await this._numberParser(phoneNumbers);\n    const errors = [];\n    const validatedPhoneNumbers = [];\n    pasedNumers.map((phoneNumber) => {\n      if (this._isSpecial(phoneNumber)) {\n        errors.push({ phoneNumber: phoneNumber.originalString, type: 'specialNumber' });\n        return null;\n      }\n      if (this.isNotAnExtension(phoneNumber.originalString)) {\n        errors.push({ phoneNumber: phoneNumber.originalString, type: 'notAnExtension' });\n        return null;\n      }\n      validatedPhoneNumbers.push(phoneNumber);\n      return null;\n    });\n    return {\n      result: (errors.length === 0),\n      numbers: validatedPhoneNumbers,\n      errors,\n    };\n  }\n\n  @proxify\n  async _numberParser(phoneNumbers) {\n    const {\n      countryCode,\n      areaCode,\n    } = this._regionSettings;\n    const homeCountry = countryCode ? { homeCountry: countryCode } : {};\n    const normalizedNumbers = phoneNumbers.map(phoneNumber => (\n      normalizeNumber({ phoneNumber, countryCode, areaCode })\n    ));\n    const response = await this._numberParserApi(normalizedNumbers, homeCountry);\n    return response.phoneNumbers.map(phoneNumber => ({\n      ...phoneNumber,\n      international:\n        !!phoneNumber.country &&\n        phoneNumber.country.isoCode !== response.homeCountry.isoCode,\n    }));\n  }\n\n  @proxify\n  async _numberParserApi(originalStrings, homeCountry) {\n    const response = await this._client.numberParser().parse().post(\n      {\n        originalStrings,\n      },\n      homeCountry,\n    );\n    return response;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n}\n"]}