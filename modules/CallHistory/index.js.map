{"version":3,"sources":["modules/CallHistory/index.js"],"names":["CallHistory","deps","dep","optional","accountInfo","callLog","callMonitor","storage","activityMatcher","contactMatcher","tabManager","options","_accountInfo","ensureExist","_callLog","_storage","_activityMatcher","_contactMatcher","_callMonitor","_tabManager","_reducer","actionTypes","_endedCallsStorageKey","registerReducer","key","reducer","endedCalls","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","sessionIds","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","_processCallHistory","pending","_lastProcessedNumbers","active","_lastProcessedIds","monitorCalls","calls","callLogCalls","_lastProcessedMonitorCalls","filter","find","call","sessionId","currentCall","currentCalls","_lastProcessedCalls","ids","forEach","recentlyEndedCalls","_shouldTriggerContactMatch","triggerMatch","_shouldTriggerActivityMatch","_getEndedCalls","length","_addEndedCalls","shouldRemove","_shouldRemoveEndedCalls","_removeEndedCalls","dispatch","type","init","initSuccess","reset","resetSuccess","map","result","addEndedCalls","timestamp","Date","now","sync","removeEndedCalls","clickToSMS","clickToCall","input","updateSearchInput","state","status","moduleStatuses","searchInput","getItem","RcModule","proxify","getter","countryCode","callFrom","from","phoneNumber","callTo","to","sort","sortByStartTime","normalizedCalls","dataMapping","callMatched","contactMapping","activityMapping","fromNumber","extensionNumber","toNumber","fromMatches","toMatches","activityMatches","matched","toNumberEntity","filteredEndedCalls","effectiveSearchString","searchResults","searchString","toLowerCase","trim","direction","name","indexOf","push","matchOrder","output","numberMap","addIfNotExist","number","addNumbersFromCall","concat"],"mappings":"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","file":"index.js","sourcesContent":["import { createSelector } from 'reselect';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport { sortByStartTime } from '../../lib/callLogHelpers';\nimport actionTypes from './actionTypes';\nimport getCallHistoryReducer, { getEndedCallsReducer } from './getCallHistoryReducer';\nimport ensureExist from '../../lib/ensureExist';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport getter from '../../lib/getter';\nimport proxify from '../../lib/proxy/proxify';\nimport cleanNumber from '../../lib/cleanNumber';\n\n/**\n * @class\n * @description Call history managing module\n */\n@Module({\n  deps: [\n    'AccountInfo',\n    'CallLog',\n    'CallMonitor',\n    { dep: 'Storage', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'CallHistoryOptions', optional: true },\n    { dep: 'TabManager', optional: true },\n  ]\n})\nexport default class CallHistory extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {AccountInfo} params.accountInfo - accountInfo module instance\n   * @param {CallLog} params.callLog - callLog module instance\n   * @param {CallMonitor} params.callMonitor - callMonitor module instance\n   * @param {ActivityMatcher} params.activityMatcher - activityMatcher module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   */\n  constructor({\n    accountInfo,\n    callLog,\n    callMonitor,\n    storage,\n    activityMatcher,\n    contactMatcher,\n    tabManager,\n    ...options\n  }) {\n    super({\n      ...options,\n    });\n    this._accountInfo = this::ensureExist(accountInfo, 'accountInfo');\n    this._callLog = this::ensureExist(callLog, 'callLog');\n    this._storage = storage;\n    this._activityMatcher = activityMatcher;\n    this._contactMatcher = contactMatcher;\n    this._callMonitor = callMonitor;\n    this._tabManager = tabManager;\n\n    if (this._storage) {\n      this._reducer = getCallHistoryReducer(this.actionTypes);\n      this._endedCallsStorageKey = 'callHistoryEndedCalls';\n      this._storage.registerReducer({\n        key: this._endedCallsStorageKey,\n        reducer: getEndedCallsReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getCallHistoryReducer(this.actionTypes, {\n        endedCalls: getEndedCallsReducer(this.actionTypes),\n      });\n    }\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: () => this.uniqueNumbers,\n        readyCheckFn: () => (\n          (!this._callMonitor || this._callMonitor.ready) &&\n          (!this._tabManager || this._tabManager.ready) &&\n          this._callLog.ready &&\n          this._accountInfo.ready\n        ),\n      });\n    }\n    if (this._activityMatcher) {\n      this._activityMatcher.addQuerySource({\n        getQueriesFn: () => this.sessionIds,\n        readyCheckFn: () => (\n          (!this._callMonitor || this._callMonitor.ready) &&\n          (!this._tabManager || this._tabManager.ready) &&\n          this._callLog.ready\n        ),\n      });\n    }\n  }\n\n  get _actionTypes() {\n    return actionTypes;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (\n      this.ready\n    ) {\n      this._processCallHistory();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._callLog.ready &&\n      (!this._callMonitor || this._callMonitor.ready) &&\n      this._accountInfo.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._activityMatcher || this._activityMatcher.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (!this._callLog.ready ||\n        (this._callMonitor && !this._callMonitor.ready) ||\n        !this._accountInfo.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._tabManager && !this._tabManager.ready) ||\n        (this._activityMatcher && !this._activityMatcher.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouldTriggerContactMatch(uniqueNumbers) {\n    if (\n      this._lastProcessedNumbers !== uniqueNumbers &&\n      (!this._tabManager || this._tabManager.active)\n    ) {\n      this._lastProcessedNumbers = uniqueNumbers;\n      if (this._contactMatcher && this._contactMatcher.ready) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  _shouldTriggerActivityMatch(sessionIds) {\n    if (\n      this._lastProcessedIds !== sessionIds &&\n      (!this._tabManager || this._tabManager.active)\n    ) {\n      this._lastProcessedIds = sessionIds;\n      if (this._activityMatcher && this._activityMatcher.ready) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  _getEndedCalls() {\n    if (this._callMonitor) {\n      const monitorCalls = this._callMonitor.calls;\n      const callLogCalls = this._callLog.calls;\n      if (this._lastProcessedMonitorCalls !== monitorCalls) {\n        const endedCalls = (this._lastProcessedMonitorCalls || [])\n          .filter(call => (\n            !monitorCalls.find(currentCall => call.sessionId === currentCall.sessionId) &&\n            // if the call's callLog has been fetch, skip\n            !callLogCalls.find(currentCall => call.sessionId === currentCall.sessionId)\n          ));\n        this._lastProcessedMonitorCalls = monitorCalls;\n        return endedCalls;\n      }\n    }\n    return null;\n  }\n\n  _shouldRemoveEndedCalls() {\n    const currentCalls = this._callLog.calls;\n    if (currentCalls !== this._lastProcessedCalls) {\n      this._lastProcessedCalls = currentCalls;\n      const ids = {};\n      currentCalls.forEach((call) => {\n        ids[call.sessionId] = true;\n      });\n      return this.recentlyEndedCalls.filter(call => ids[call.sessionId]);\n    }\n    return null;\n  }\n\n  _processCallHistory() {\n    const uniqueNumbers = this.uniqueNumbers;\n    if (this._shouldTriggerContactMatch(uniqueNumbers)) {\n      this._contactMatcher.triggerMatch();\n    }\n    const sessionIds = this.sessionIds;\n    if (this._shouldTriggerActivityMatch(sessionIds)) {\n      this._activityMatcher.triggerMatch();\n    }\n\n    const endedCalls = this._getEndedCalls();\n    if (endedCalls && endedCalls.length) {\n      this._addEndedCalls(endedCalls);\n    }\n\n    const shouldRemove = this._shouldRemoveEndedCalls();\n    if (shouldRemove && shouldRemove.length) {\n      this._removeEndedCalls(shouldRemove);\n    }\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.init,\n    });\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.reset,\n    });\n    this._lastProcessedCalls = null;\n    this._lastProcessedIds = null;\n    this._lastProcessedMonitorCalls = null;\n    this._lastProcessedNumbers = null;\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  _addEndedCalls(endedCalls) {\n    endedCalls.map((call) => {\n      call.result = 'Disconnected';\n      return call;\n    });\n    this.store.dispatch({\n      type: this.actionTypes.addEndedCalls,\n      endedCalls,\n      timestamp: Date.now(),\n    });\n    this._callLog.sync();\n  }\n\n  _removeEndedCalls(endedCalls) {\n    this.store.dispatch({\n      type: this.actionTypes.removeEndedCalls,\n      endedCalls,\n    });\n  }\n\n  // for track click to sms in call history\n  @proxify\n  onClickToSMS() {\n    this.store.dispatch({\n      type: this.actionTypes.clickToSMS\n    });\n  }\n  // for track click to call in call history\n  @proxify\n  onClickToCall() {\n    this.store.dispatch({\n      type: this.actionTypes.clickToCall,\n    });\n  }\n\n  @proxify\n  updateSearchInput(input) {\n    this.store.dispatch({\n      type: this.actionTypes.updateSearchInput,\n      input,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  @getter\n  normalizedCalls = createSelector(\n    () => this._callLog.calls,\n    () => this._accountInfo.countryCode,\n    (calls, countryCode) => (\n      calls.map((call) => {\n        const callFrom = {\n          ...call.from,\n        };\n        if (callFrom.phoneNumber) {\n          callFrom.phoneNumber = normalizeNumber({\n            phoneNumber: callFrom.phoneNumber,\n            countryCode,\n          });\n        }\n        const callTo = {\n          ...call.to,\n        };\n        if (callTo.phoneNumber) {\n          callTo.phoneNumber = normalizeNumber({\n            phoneNumber: callTo.phoneNumber,\n            countryCode,\n          });\n        }\n        return {\n          ...call,\n          from: callFrom,\n          to: callTo,\n        };\n      }).sort(sortByStartTime)\n    ),\n  )\n\n  @getter\n  effectiveSearchString = createSelector(\n    () => this.state.searchInput,\n    (input) => {\n      if (input && input.length >= 3) return input;\n      return '';\n    }\n  )\n\n  @getter\n  calls = createSelector(\n    () => this.normalizedCalls,\n    () => this.recentlyEndedCalls,\n    () => (this._contactMatcher && this._contactMatcher.dataMapping),\n    () => (this._activityMatcher && this._activityMatcher.dataMapping),\n    () => (this._callMonitor && this._callMonitor.callMatched),\n    (\n      normalizedCalls,\n      endedCalls,\n      contactMapping = {},\n      activityMapping = {},\n      callMatched = {}\n    ) => {\n      const sessionIds = {};\n      const calls = normalizedCalls.map((call) => {\n        sessionIds[call.sessionId] = true;\n        const fromNumber = call.from && (call.from.phoneNumber || call.from.extensionNumber);\n        const toNumber = call.to && (call.to.phoneNumber || call.to.extensionNumber);\n        const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n        const toMatches = (toNumber && contactMapping[toNumber]) || [];\n        const activityMatches = (activityMapping[call.sessionId]) || [];\n        const matched = callMatched[call.sessionId];\n        return {\n          ...call,\n          fromMatches,\n          toMatches,\n          activityMatches,\n          toNumberEntity: matched,\n        };\n      });\n      const filteredEndedCalls = endedCalls\n        .filter(call => !sessionIds[call.sessionId])\n        .map((call) => {\n          const activityMatches = (activityMapping[call.sessionId]) || [];\n          const fromNumber = call.from && (call.from.phoneNumber || call.from.extensionNumber);\n          const toNumber = call.to && (call.to.phoneNumber || call.to.extensionNumber);\n          const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n          const toMatches = (toNumber && contactMapping[toNumber]) || [];\n          return {\n            ...call,\n            activityMatches,\n            fromMatches,\n            toMatches,\n          };\n        });\n      return [\n        ...filteredEndedCalls,\n        ...calls\n      ].sort(sortByStartTime);\n    }\n  )\n\n  @getter\n  filterCalls = createSelector(\n    () => this.calls,\n    () => this.effectiveSearchString,\n    (\n      calls,\n      effectiveSearchString\n    ) => {\n      if (effectiveSearchString !== '') {\n        const searchResults = [];\n        const searchString = effectiveSearchString.toLowerCase().trim();\n        calls.forEach((call) => {\n          if (\n            (call.direction === 'Inbound' && call.fromMatches[0] && call.fromMatches[0].name && call.fromMatches[0].name.toLowerCase().indexOf(searchString) > -1) ||\n            (call.direction === 'Outbound' && call.toMatches[0] && call.toMatches[0].name && call.toMatches[0].name.toLowerCase().indexOf(searchString) > -1) \n          ) {\n            searchResults.push({\n              ...call,\n              matchOrder: 0,\n            });\n          }\n        });\n        return searchResults.sort(sortByStartTime);\n      }\n      return calls.sort(sortByStartTime);\n    }\n  )\n\n  @getter\n  uniqueNumbers = createSelector(\n    () => this.normalizedCalls,\n    () => this.recentlyEndedCalls,\n    (normalizedCalls, endedCalls) => {\n      const output = [];\n      const numberMap = {};\n      function addIfNotExist(number) {\n        if (!numberMap[number]) {\n          output.push(number);\n          numberMap[number] = true;\n        }\n      }\n      function addNumbersFromCall(call) {\n        if (call.from && call.from.phoneNumber) {\n          addIfNotExist(call.from.phoneNumber);\n        } else if (call.from && call.from.extensionNumber) {\n          addIfNotExist(call.from.extensionNumber);\n        }\n        if (call.to && call.to.phoneNumber) {\n          addIfNotExist(call.to.phoneNumber);\n        } else if (call.to && call.to.extensionNumber) {\n          addIfNotExist(call.to.extensionNumber);\n        }\n      }\n      normalizedCalls.forEach(addNumbersFromCall);\n      endedCalls.forEach(addNumbersFromCall);\n      return output;\n    },\n  )\n\n  @getter\n  sessionIds = createSelector(\n    () => this._callLog.calls,\n    () => this.recentlyEndedCalls,\n    (calls, endedCalls) => {\n      const sessionIds = {};\n      return calls.map((call) => {\n        sessionIds[call.sessionId] = true;\n        return call.sessionId;\n      }).concat(\n        endedCalls\n          .filter(call => !sessionIds[call.sessionId])\n          .map(call => call.sessionId)\n      );\n    },\n  )\n\n  get searchInput() {\n    return this.state.searchInput;\n  }\n\n  get recentlyEndedCalls() {\n    if (this._storage) {\n      return this._storage.getItem(this._endedCallsStorageKey);\n    }\n    return this.state.endedCalls;\n  }\n}\n"]}