{"version":3,"sources":["modules/ConferenceCall/getConferenceCallReducer.js"],"names":["getConferenceCallStatusReducer","getMakeConferenceCallReducer","getMergingStatusReducer","getMergingPairReducer","getConferenceCallReducer","types","state","conferenceCallStatus","idle","type","makeConference","terminateConference","updateConference","bringInConference","removeFromConference","getParty","requesting","makeConferenceSucceeded","makeConferenceFailed","terminateConferenceSucceeded","terminateConferenceFailed","updateConferenceSucceeded","updateConferenceFailed","bringInConferenceSucceeded","bringInConferenceFailed","removeFromConferenceSucceeded","removeFromConferenceFailed","getPartySucceeded","getPartyFailed","resetSuccess","conference","session","partyProfile","res","id","profiles","mergeStart","mergeSucceeded","mergeFailed","from","to","updateFromSession","updateToSession","status","conferences","isMerging","mergingPair"],"mappings":"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","file":"getConferenceCallReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport conferenceCallStatus from './conferenceCallStatus';\n\nexport function getConferenceCallStatusReducer(types) {\n  return (state = conferenceCallStatus.idle, {\n    type\n  }) => {\n    switch (type) {\n      case types.makeConference:\n      case types.terminateConference:\n      case types.updateConference:\n      case types.bringInConference:\n      case types.removeFromConference:\n      case types.getParty:\n        return conferenceCallStatus.requesting;\n\n      case types.makeConferenceSucceeded:\n      case types.makeConferenceFailed:\n      case types.terminateConferenceSucceeded:\n      case types.terminateConferenceFailed:\n      case types.updateConferenceSucceeded:\n      case types.updateConferenceFailed:\n      case types.bringInConferenceSucceeded:\n      case types.bringInConferenceFailed:\n      case types.removeFromConferenceSucceeded:\n      case types.removeFromConferenceFailed:\n      case types.getPartySucceeded:\n      case types.getPartyFailed:\n      case types.resetSuccess:\n        return conferenceCallStatus.idle;\n\n      default:\n        return state;\n    }\n  };\n}\n\n\nexport function getMakeConferenceCallReducer(types) {\n  return (state = {}, {\n    type,\n    conference, // platform conference session data\n    session, // SIP.inviteClientContext instance\n    partyProfile,\n  }) => {\n    const res = {\n      ...state\n    };\n    switch (type) {\n      case types.resetSuccess:\n        return {};\n      case types.makeConferenceSucceeded:\n      case types.updateConferenceSucceeded:\n        res[conference.id] = {\n          conference,\n          session,\n          profiles: (res[conference.id] && res[conference.id].profiles) || []\n        };\n        return res;\n      case types.bringInConferenceSucceeded:\n        res[conference.id] = {\n          conference,\n          session,\n          profiles: [...res[conference.id].profiles, partyProfile]\n        };\n        return res;\n      case types.terminateConferenceSucceeded:\n        delete res[conference.id];\n        return res;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getMergingStatusReducer(types) {\n  return (state = false, { type }) => {\n    switch (type) {\n      case types.mergeStart:\n        return true;\n      case types.mergeSucceeded:\n      case types.mergeFailed:\n      case types.resetSuccess:\n        return false;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getMergingPairReducer(types) {\n  return (state = {}, { type, from, to }) => {\n    switch (type) {\n      case types.updateFromSession:\n        return { from };\n      case types.updateToSession:\n        return { ...state, to };\n      case types.mergeSucceeded:\n      case types.resetSuccess:\n        return {};\n      // restore the pair when failure\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getConferenceCallReducer(types) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n    conferences: getMakeConferenceCallReducer(types),\n    conferenceCallStatus: getConferenceCallStatusReducer(types),\n    isMerging: getMergingStatusReducer(types),\n    mergingPair: getMergingPairReducer(types),\n  });\n}\n"]}