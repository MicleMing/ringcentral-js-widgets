{"version":3,"sources":["modules/ConferenceCall/index.js"],"names":["DEFAULT_TIMEOUT","DEFAULT_TTL","MAXIMUM_CAPACITY","ascendSortParties","parties","filter","party","conferenceRole","toLowerCase","host","sort","last","next","id","split","ConferenceCall","deps","dep","optional","auth","alert","call","callingSettings","client","rolesAndPermissions","contactMatcher","webphone","connectivityMonitor","pulling","capacity","timeout","options","actionTypes","_auth","ensureExist","_alert","_call","_callingSettings","_client","_webphone","_connectivityMonitor","_contactMatcher","_rolesAndPermissions","_reducer","_ttl","_timout","_timers","_pulling","addSelector","conferences","conference","conferenceData","getOnlinePartyProfiles","sessionId","res","findConferenceWithSession","isMerging","session","sessions","find","c","store","dispatch","type","updateConference","state","service","platform","get","rawResponse","response","json","storedconference","updateConferenceSucceeded","updateConferenceFailed","message","toString","terminateConference","hangup","delete","terminateConferenceSucceeded","terminateConferenceFailed","webphoneSession","propagete","conferenceState","ready","direction","callDirections","outbound","isOverload","connectivity","danger","conferenceErrors","modeError","ttl","bringInConference","sessionData","data","_getProfile","partyProfile","post","updateConferenceStatus","newParties","length","bringInConferenceSucceeded","bringInConferenceFailed","partyId","removeFromConference","removeFromConferenceSucceeded","removeFromConferenceFailed","propagate","_checkPermission","permissionsMessages","insufficientPrivilege","callingMode","callingModes","_makeConference","subscribe","_onStateChange","webphoneSessions","isConferenceSession","Object","prototype","warning","bringInFailed","mergeStart","sipInstances","conferenceId","map","_sessions","sessionIds","x","setSessionCaching","pSips","instance","p","resolve","on","all","_mergeToConference","then","mergeSucceeded","profiles","mergeFailed","clearSessionCaching","fromSessionId","toSessionId","updateFromSession","updateToSession","reduce","accum","idx","status","code","partyStatusCode","disconnected","push","i","getOnlineParties","Array","isArray","countOnlineParties","setTimeout","stopPollingConferenceStatus","startPollingConferenceStatus","clearTimeout","Error","initSuccess","_shouldInit","_init","_shouldReset","_reset","resetSuccess","loggedIn","pending","callingEnabled","webphoneEnabled","forEach","evt","bringInToConference","makeConference","confereceAccepted","race","reject","phoneNumber","voiceCallToken","isConference","_hookConference","makeConferenceSucceeded","makeConferenceFailed","sessionInstance","to","contactMatch","toUserName","avatarUrl","rcId","dataMapping","contactMapping","contact","nameMatches","profileImageUrl","name","conferenceCallStatus","mergingPair","_selectors","partyProfiles","RcModule","proxify"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport callDirections from '../../enums/callDirections';\nimport RcModule from '../../lib/RcModule';\nimport actionTypes from './actionTypes';\nimport partyStatusCode from './partyStatusCode';\nimport conferenceRole from './conferenceRole';\nimport getConferenceCallReducer from './getConferenceCallReducer';\nimport proxify from '../../lib/proxy/proxify';\nimport permissionsMessages from '../RolesAndPermissions/permissionsMessages';\nimport conferenceErrors from './conferenceCallErrors';\nimport { isConferenceSession } from '../Webphone/webphoneHelper';\n// import webphoneErrors from '../Webphone/webphoneErrors';\nimport ensureExist from '../../lib/ensureExist';\n// import sleep from '../../lib/sleep';\nimport callingModes from '../CallingSettings/callingModes';\n\nconst DEFAULT_TIMEOUT = 30000;// time out for conferencing session being accepted.\nconst DEFAULT_TTL = 5000;// timer to update the conference information\nconst MAXIMUM_CAPACITY = 10;\n\n\nfunction ascendSortParties(parties) {\n  return parties\n    .filter(party => party.conferenceRole.toLowerCase() !== conferenceRole.host)\n    .sort((last, next) => +last.id.split('-')[1] - (+next.id.split('-')[1]));\n}\n\n/**\n * @class\n * @description ConferenceCall managing module\n */\n@Module({\n  deps: [\n    'Auth',\n    'Alert',\n    {\n      dep: 'Call',\n      optional: true\n    },\n    'CallingSettings',\n    'Client',\n    'RolesAndPermissions',\n    {\n      dep: 'ContactMatcher',\n      optional: true\n    },\n    {\n      dep: 'Webphone',\n      optional: true\n    },\n    { dep: 'ConnectivityMonitor', optional: true },\n    {\n      dep: 'ConferenceCallOptions',\n      optional: true\n    },\n  ]\n})\nexport default class ConferenceCall extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    auth,\n    alert,\n    call,\n    callingSettings,\n    client,\n    rolesAndPermissions,\n    contactMatcher,\n    webphone,\n    connectivityMonitor,\n    pulling = true,\n    capacity = MAXIMUM_CAPACITY,\n    timeout = DEFAULT_TIMEOUT,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = this::ensureExist(auth, 'auth');\n    this._alert = this::ensureExist(alert, 'alert');\n    this._call = this::ensureExist(call, 'call');\n    this._callingSettings = this::ensureExist(callingSettings, 'callingSettings');\n    this._client = this::ensureExist(client, 'client');\n    // in order to run the integeration test, we need it to be optional\n    this._webphone = webphone;\n    this._connectivityMonitor = connectivityMonitor;\n    this._contactMatcher = contactMatcher;\n    this._rolesAndPermissions = this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    // we need the constructed actions\n    this._reducer = getConferenceCallReducer(this.actionTypes);\n    this._ttl = DEFAULT_TTL;\n    this._timout = timeout;\n    this._timers = {};\n    this._pulling = pulling;\n    this.capacity = capacity;\n\n    this.addSelector('partyProfiles',\n      () => (\n        Object.values(this.conferences)[0] &&\n        Object.values(this.conferences)[0].conference.parties\n      ),\n      () => {\n        const conferenceData = Object.values(this.conferences)[0];\n        if (!conferenceData) {\n          return [];\n        }\n        return this.getOnlinePartyProfiles(conferenceData.conference.id);\n      },\n    );\n  }\n\n  isConferenceSession(sessionId) {\n    // only can be used after webphone._onCallStartFunc\n    let res = !!this.findConferenceWithSession(sessionId);\n\n    if (this.isMerging && !res) {\n      const session = this._webphone.sessions.find(session => session.id === sessionId);\n      res = isConferenceSession(session);\n    }\n\n    return res;\n  }\n\n  findConferenceWithSession(sessionId) {\n    return Object.values(this.conferences).find(c => c.session.id === sessionId);\n  }\n\n  /**\n   *\n   * @param {string} id: conference id\n   */\n  @proxify\n  async updateConferenceStatus(id) {\n    this.store.dispatch({\n      type: this.actionTypes.updateConference,\n      conference: this.state.conferences[id],\n    });\n    try {\n      const rawResponse = await this._client.service.platform()\n        .get(`/account/~/telephony/sessions/${id}`);\n      const response = rawResponse.json();\n      const storedconference = this.state.conferences[response.id];\n      const conference = Object.assign({}, storedconference.conference);\n      conference.parties = response.parties;\n      const {\n        session\n      } = storedconference;\n      this.store.dispatch({\n        type: this.actionTypes.updateConferenceSucceeded,\n        conference,\n        session\n      });\n    } catch (e) {\n      // TODO: alert\n      this.store.dispatch({\n        type: this.actionTypes.updateConferenceFailed,\n        conference: this.state.conferences[id],\n        message: e.toString()\n      });\n      // need to propagate to out side try...catch block\n      throw e;\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return this.state.conferences[id];\n    }\n  }\n\n  /**\n   * terminate a conference.\n   * @param {string} id: conference id\n   */\n  @proxify\n  async terminateConference(id) {\n    this.store.dispatch({\n      type: this.actionTypes.terminateConference,\n      conference: this.state.conferences[id],\n    });\n    const conferenceData = this.conferences[id];\n\n    try {\n      if (this._webphone) {\n        if (conferenceData) {\n          this._webphone.hangup(conferenceData.session.id);\n          // Help server to do the GC, and we don't care the whether it's successful or not\n          this._client.service.platform()\n            .delete(`/account/~/telephony/sessions/${id}`);\n          this.store.dispatch({\n            type: this.actionTypes.terminateConferenceSucceeded,\n            conference: conferenceData.conference,\n          });\n        } else {\n          this.store.dispatch({\n            type: this.actionTypes.terminateConferenceFailed,\n          });\n        }\n      } else {\n        await this._client.service.platform()\n          .delete(`/account/~/telephony/sessions/${id}`);\n        this.store.dispatch({\n          type: this.actionTypes.terminateConferenceSucceeded,\n          conference: conferenceData.conference,\n        });\n      }\n    } catch (e) {\n      // TODO:this._alert.warning\n      this.store.dispatch({\n        type: this.actionTypes.terminateConferenceFailed,\n        message: e.toString()\n      });\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return conferenceData;\n    }\n  }\n\n  /**\n   * Bring-in an outbound call into conference.\n   * @param {string} id: conference id\n   * @param {webphone.session} webphoneSession: get it from callMonitor.\\w+Calls[\\d+]\n   * interface SessionData{\n   *  \"party-id\": String,\n   *  \"session-id\": String\n   * }\n   */\n  @proxify\n  async bringInToConference(id, webphoneSession, propagete = false) {\n    const conferenceState = this.state.conferences[id];\n    if (\n      !conferenceState\n      || !this.ready\n      || !webphoneSession\n      || webphoneSession.direction !== callDirections.outbound\n      || this.isOverload(id)\n      || !this._connectivityMonitor.connectivity\n    ) {\n      this._alert.danger({\n        message: conferenceErrors.modeError,\n        ttl: 0,\n      });\n      return null;\n    }\n    const { conference, session } = conferenceState;\n    this.store.dispatch({\n      type: this.actionTypes.bringInConference,\n      conference,\n      session,\n    });\n    const sessionData = webphoneSession.data;\n    try {\n      const partyProfile = await this._getProfile(webphoneSession);\n      await this._client.service.platform()\n        .post(`/account/~/telephony/sessions/${id}/parties/bring-in`, sessionData);\n      await this.updateConferenceStatus(id);\n      const conferenceState = this.state.conferences[id];\n      const newParties = ascendSortParties(conferenceState.conference.parties);\n      partyProfile.id = newParties[newParties.length - 1].id;\n      // let the contact match to do the matching of the parties.\n      this.store.dispatch({\n        type: this.actionTypes.bringInConferenceSucceeded,\n        conference,\n        session,\n        partyProfile,\n      });\n      return id;\n    } catch (e) {\n      this.store.dispatch({\n        type: this.actionTypes.bringInConferenceFailed,\n        message: e.toString()\n      });\n      if (!propagete) {\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * remove a participant from conference.\n   * @param {string} id: conference id\n   * @param {SessionData} partyId: one participant's id of an conference's `parties` list\n   */\n  @proxify\n  async removeFromConference(id, partyId) {\n    this.store.dispatch({\n      type: this.actionTypes.removeFromConference,\n      conference: this.state.conferences[id],\n    });\n\n    try {\n      await this._client.service.platform()\n        .delete(`/account/~/telephony/sessions/${id}/parties/${partyId}`);\n      await this.updateConferenceStatus(id);\n      this.store.dispatch({\n        type: this.actionTypes.removeFromConferenceSucceeded,\n        conference: this.state.conferences[id],\n      });\n    } catch (e) {\n      // TODO:this._alert.warning\n      this.store.dispatch({\n        type: this.actionTypes.removeFromConferenceFailed,\n        message: e.toString()\n      });\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return this.state.conferences[id];\n    }\n  }\n\n  /**\n   * start a conference call, return the session\n   */\n  @proxify\n  async makeConference(propagate = false) {\n    if (!this.ready || !this._connectivityMonitor.connectivity) {\n      this._alert.danger({\n        message: conferenceErrors.modeError,\n        ttl: 0,\n      });\n      return null;\n    }\n    if (!this._checkPermission()) {\n      if (!propagate) {\n        this._alert.danger({\n          message: permissionsMessages.insufficientPrivilege,\n          ttl: 0,\n        });\n      }\n\n      return null;\n    }\n    if (!this._callingSettings.callingMode === callingModes.webphone) {\n      if (!propagate) {\n        this._alert.danger({\n          message: conferenceErrors.modeError,\n          ttl: 0,\n        });\n      }\n\n      return null;\n    }\n    const session = await this._makeConference(propagate);\n    return session;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  /**\n   * Merge calls to (or create) a conference.\n   * @param {webphone.sessions} webphoneSessions\n   * FIXME: dynamically construct this function during the construction\n   * to avoid `this._webphone` criterias to improve performance ahead of time\n   */\n  async mergeToConference(webphoneSessions = []) {\n    webphoneSessions = webphoneSessions.filter(session => !this.isConferenceSession(session.id))\n      .filter(session => Object.prototype.toString.call(session).toLowerCase() === '[object object]');\n\n    if (!webphoneSessions.length) {\n      this._alert.warning({\n        message: conferenceErrors.bringInFailed,\n      });\n      return;\n    }\n\n    this.store.dispatch({\n      type: this.actionTypes.mergeStart,\n    });\n\n    let sipInstances;\n    let conferenceId = null;\n\n    if (this._webphone) {\n      /**\n       * Because the concurrency behaviour of the server,\n       * we cannot sure the merging process is over when\n       * the function's procedure has finshed.\n       */\n      sipInstances = webphoneSessions\n        .map(webphoneSession => this._webphone._sessions.get(webphoneSession.id));\n\n      /**\n       * HACK: we need to preserve the merging session in prevent the glitch of\n       * the call control page.\n       */\n      const sessionIds = webphoneSessions.map(x => x.id);\n      this._webphone.setSessionCaching(sessionIds);\n\n      const pSips = sipInstances.map((instance) => {\n        const p = new Promise((resolve) => {\n          instance.on('terminated', () => {\n            resolve();\n          });\n        });\n        return p;\n      });\n\n      await Promise.all([this._mergeToConference(webphoneSessions), ...pSips])\n        .then(() => {\n          this.store.dispatch({\n            type: this.actionTypes.mergeSucceeded,\n          });\n        }, () => {\n          const conferenceState = Object.values(this.conferences)[0];\n          /**\n           * if create conference successfully but failed to bring-in,\n           *  then terminate the conference.\n           */\n          if (conferenceState && conferenceState.profiles.length < 1) {\n            this.terminateConference(conferenceState.conference.id);\n          }\n          this._alert.warning({\n            message: conferenceErrors.bringInFailed,\n          });\n          this.store.dispatch({\n            type: this.actionTypes.mergeFailed,\n          });\n        });\n      this._webphone.clearSessionCaching();\n    } else {\n      try {\n        conferenceId = await this._mergeToConference(webphoneSessions);\n\n        this.store.dispatch({\n          type: this.actionTypes.mergeSucceeded,\n        });\n      } catch (e) {\n        const conferenceState = Object.values(this.conferences)[0];\n        /**\n         * if create conference successfully but failed to bring-in,\n         *  then terminate the conference.\n         */\n        if (conferenceState && conferenceState.conference.parties.length < 1) {\n          this.terminateConference(conferenceState.conference.id);\n        }\n        this._alert.warning({\n          message: conferenceErrors.bringInFailed,\n        });\n      }\n      if (!sipInstances || conferenceId === null) {\n        this.store.dispatch({\n          type: this.actionTypes.mergeFailed,\n        });\n      }\n    }\n  }\n\n  /**\n   * we need to record the merge destination when merge from the call control pages\n   * @param {webphone.session} from\n   */\n  setMergeParty({ fromSessionId, toSessionId }) {\n    if (fromSessionId) {\n      return this.store.dispatch({\n        type: this.actionTypes.updateFromSession,\n        fromSessionId,\n      });\n    }\n    return this.store.dispatch({\n      type: this.actionTypes.updateToSession,\n      toSessionId,\n    });\n  }\n\n  getOnlinePartyProfiles(id) {\n    const conferenceData = this.conferences[id];\n\n    if (conferenceData) {\n      return ascendSortParties(conferenceData.conference.parties)\n        .reduce((accum, party, idx) => {\n          if (party.status.code.toLowerCase() !== partyStatusCode.disconnected) {\n            // 0 position is the host\n            accum.push({ idx, party });\n          }\n          return accum;\n        }, [])\n        .map(({ idx, party }) => ({ ...party, ...conferenceData.profiles[idx] }))\n        .filter(i => !!i);\n    }\n    return null;\n  }\n\n  getOnlineParties(id) {\n    const conferenceData = this.conferences[id];\n    if (conferenceData) {\n      return conferenceData.conference.parties.filter(\n        p => p.status.code.toLowerCase() !== partyStatusCode.disconnected\n      );\n    }\n    return null;\n  }\n\n  countOnlineParties(id) {\n    const res = this.getOnlineParties(id);\n    return Array.isArray(res) ? res.length : null;\n  }\n\n  isOverload(id) {\n    return this.countOnlineParties(id) >= this.capacity;\n  }\n\n  async startPollingConferenceStatus(id) {\n    if (this._timers[id] || !this._pulling) {\n      return;\n    }\n    await this.updateConferenceStatus(id);\n    this._timers[id] = setTimeout(\n      async () => {\n        await this.updateConferenceStatus(id);\n        this.stopPollingConferenceStatus(id);\n        if (this.conferences[id]) {\n          this.startPollingConferenceStatus(id);\n        }\n      },\n      this._ttl);\n  }\n\n  stopPollingConferenceStatus(id) {\n    clearTimeout(this._timers[id]);\n    delete this._timers[id];\n  }\n\n  openPulling() {\n    this._pulling = true;\n  }\n\n  closePulling() {\n    this._pulling = false;\n  }\n\n  togglePulling() {\n    this._pulling = !this.pulling;\n  }\n\n  setCapatity(capacity = MAXIMUM_CAPACITY) {\n    if (typeof capacity !== 'number') {\n      throw new Error('The capcity must be a number');\n    }\n    this.capacity = capacity;\n    return capacity;\n  }\n\n  setTimeout(timeout = DEFAULT_TIMEOUT) {\n    if (typeof timeout !== 'number') {\n      throw new Error('The timeout must be a number');\n    }\n    this._timout = timeout;\n    return timeout;\n  }\n\n  _init() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess\n    });\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this._init();\n    } else if (this._shouldReset()) {\n      this._reset();\n    }\n  }\n\n  _reset() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess\n    });\n  }\n\n  _shouldInit() {\n    return (\n      (this._auth.loggedIn && this._auth.ready) &&\n      this._alert.ready &&\n      this._callingSettings.ready &&\n      this._call.ready &&\n      this._rolesAndPermissions.ready &&\n      this._connectivityMonitor.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        (!this._auth.loggedIn || !this._auth.ready)\n        || !this._alert.ready\n        || !this._callingSettings.ready\n        || !this._call.ready\n        || !this._rolesAndPermissions.ready\n        || !this._connectivityMonitor.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _checkPermission() {\n    if (!this._rolesAndPermissions.callingEnabled || !this._rolesAndPermissions.webphoneEnabled) {\n      this._alert.danger({\n        message: permissionsMessages.insufficientPrivilege,\n        ttl: 0,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  _hookConference(conference, session) {\n    ['accepted'].forEach(\n      evt => session.on(\n        evt,\n        () => this.startPollingConferenceStatus(conference.id)\n      )\n    );\n    ['terminated', 'failed', 'rejected'].forEach(\n      evt => session.on(evt, () => {\n        this.store.dispatch({\n          type: this.actionTypes.terminateConferenceSucceeded,\n          conference,\n        });\n        this.stopPollingConferenceStatus(conference.id);\n      })\n    );\n  }\n\n  async _mergeToConference(webphoneSessions = []) {\n    const conferenceState = Object.values(this.conferences)[0];\n\n    if (conferenceState) {\n      const conferenceId = conferenceState.conference.id;\n      this.stopPollingConferenceStatus(conferenceId);\n      // for the sake of participants ordering, we can't concurrently bring in the participants\n      for (const webphoneSession of webphoneSessions) {\n        await this.bringInToConference(conferenceId, webphoneSession, true);\n      }\n      if (!this.conferences[conferenceId].profiles.length) {\n        throw new Error('bring-in operations failed, not all intended parties were brought in');\n      }\n      this.startPollingConferenceStatus(conferenceId);\n      return conferenceId;\n    }\n    const { id } = await this.makeConference(true);\n    let confereceAccepted = false;\n    await Promise.race([\n      new Promise((resolve, reject) => {\n        const session = this.conferences[id].session;\n        session.on('accepted', () => {\n          confereceAccepted = true;\n          resolve();\n        });\n        session.on('cancel', () => reject(new Error('conferecing cancel')));\n        session.on('failed', () => reject(new Error('conferecing failed')));\n        session.on('rejected', () => reject(new Error('conferecing rejected')));\n        session.on('terminated', () => reject(new Error('conferecing terminated')));\n      }),\n      new Promise((resolve, reject) => {\n        setTimeout(() => (confereceAccepted ? resolve() : reject(new Error('conferecing timeout')))\n          , this._timout);\n      })\n    ]);\n\n    await this._mergeToConference(webphoneSessions);\n    return id;\n  }\n\n  async _makeConference(propagate = false) {\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.makeConference,\n      });\n\n      // TODO: replace with SDK function chaining calls\n      const rawResponse = await this._client.service.platform()\n        .post('/account/~/telephony/conference', {});\n      const response = rawResponse.json();\n      const conference = response.session;\n      const phoneNumber = conference.voiceCallToken;\n      // whether to mutate the session to mark the conference?\n      const session = await this._call.call({\n        phoneNumber,\n        isConference: true,\n      });\n\n      if (typeof session === 'object' &&\n        Object.prototype.toString.call(session.on).toLowerCase() === '[object function]') {\n        this._hookConference(conference, session);\n\n        this.store.dispatch({\n          type: this.actionTypes.makeConferenceSucceeded,\n          conference,\n          session,\n          parties: [],\n        });\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.makeConferenceFailed,\n        });\n      }\n\n      return conference;\n    } catch (e) {\n      this.store.dispatch({\n        type: this.actionTypes.makeConferenceFailed,\n        message: e.toString()\n      });\n\n      if (!propagate) {\n        this._alert.warning({\n          message: conferenceErrors.makeConferenceFailed,\n        });\n        return null;\n      }\n      // need to propagate to out side try...catch block\n      throw e;\n    }\n  }\n\n  async _getProfile(sessionInstance) {\n    const session = this._webphone.sessions.find(session => session.id === sessionInstance.id);\n    const { to, contactMatch } = session;\n    let { toUserName } = session;\n    let avatarUrl;\n    let rcId;\n\n    if (this._contactMatcher && this._contactMatcher.dataMapping) {\n      const contactMapping = this._contactMatcher.dataMapping;\n      let contact = contactMatch;\n      const nameMatches = (contactMapping && contactMapping[to]) || [];\n\n      if (!contact) {\n        contact = nameMatches && nameMatches[0];\n      }\n      if (contact) {\n        avatarUrl = contact.profileImageUrl;\n        toUserName = contact.name;\n        rcId = contact.id;\n      }\n    }\n    return {\n      avatarUrl,\n      toUserName,\n      to,\n      rcId,\n    };\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get conferences() {\n    return this.state.conferences;\n  }\n\n  get conferenceCallStatus() {\n    return this.state.conferenceCallStatus;\n  }\n\n  get isMerging() {\n    return this.state.isMerging;\n  }\n\n  get mergingPair() {\n    return this.state.mergingPair;\n  }\n\n  get partyProfiles() {\n    return this._selectors.partyProfiles();\n  }\n}\n"]}