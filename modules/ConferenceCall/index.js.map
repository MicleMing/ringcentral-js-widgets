{"version":3,"sources":["modules/ConferenceCall/index.js"],"names":["DEFAULT_TIMEOUT","DEFAULT_TTL","MAXIMUM_CAPACITY","ascendSortParties","parties","filter","party","conferenceRole","toLowerCase","host","sort","last","next","id","split","ConferenceCall","deps","dep","optional","auth","alert","call","callingSettings","client","rolesAndPermissions","contactMatcher","webphone","connectivityMonitor","pulling","capacity","timeout","options","actionTypes","_auth","ensureExist","_alert","_call","_callingSettings","_client","_webphone","_connectivityMonitor","_contactMatcher","_rolesAndPermissions","_reducer","_ttl","_timout","_timers","_pulling","addSelector","conferences","conference","profiles","conferenceData","getOnlinePartyProfiles","sessionId","res","findConferenceWithSession","isMerging","session","sessions","find","c","store","dispatch","type","updateConference","state","service","platform","get","rawResponse","response","json","storedconference","updateConferenceSucceeded","updateConferenceFailed","message","toString","terminateConference","hangup","delete","terminateConferenceSucceeded","terminateConferenceFailed","webphoneSession","propagete","conferenceState","ready","direction","callDirections","outbound","isOverload","connectivity","danger","conferenceErrors","modeError","ttl","bringInConference","sessionData","data","_getProfile","partyProfile","post","updateConferenceStatus","newConference","newParties","length","bringInConferenceSucceeded","bringInConferenceFailed","partyId","removeFromConference","removeFromConferenceSucceeded","removeFromConferenceFailed","propagate","_checkPermission","permissionsMessages","insufficientPrivilege","callingMode","callingModes","_makeConference","subscribe","_onStateChange","webphoneSessions","isConferenceSession","Object","prototype","warning","bringInFailed","mergeStart","sipInstances","conferenceId","map","_sessions","sessionIds","x","setSessionCaching","pSips","instance","p","resolve","on","all","_mergeToConference","then","mergeSucceeded","mergeFailed","clearSessionCaching","fromSessionId","toSessionId","updateFromSession","updateToSession","reduce","accum","idx","status","code","partyStatusCode","disconnected","push","i","getOnlineParties","Array","isArray","countOnlineParties","setTimeout","stopPollingConferenceStatus","startPollingConferenceStatus","clearTimeout","Error","initSuccess","_shouldInit","_init","_shouldReset","_reset","resetSuccess","loggedIn","pending","callingEnabled","webphoneEnabled","forEach","evt","bringInToConference","makeConference","confereceAccepted","race","reject","phoneNumber","voiceCallToken","isConference","_hookConference","makeConferenceSucceeded","makeConferenceFailed","sessionInstance","to","contactMatch","from","fromNumber","toUserName","avatarUrl","rcId","partyNumber","match","queries","ignoreCache","dataMapping","contactMapping","contact","nameMatches","profileImageUrl","name","isSessionOnhold","isOnHold","local","setMergeParty","sessionToMergeWith","mergingPair","mergeToConference","conferenceSession","isConferenceOnhold","resume","hold","conferenceCallStatus","_selectors","partyProfiles","RcModule","proxify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;;AAEA;;;AAbA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,kBAAkB,KAAxB,C,CAA8B;AAC9B,IAAMC,cAAc,IAApB,C,CAAyB;AACzB,IAAMC,mBAAmB,EAAzB;;AAGA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AAClC,SAAOA,QACJC,MADI,CACG;AAAA,WAASC,MAAMC,cAAN,CAAqBC,WAArB,OAAuCD,yBAAeE,IAA/D;AAAA,GADH,EAEJC,IAFI,CAEC,UAACC,IAAD,EAAOC,IAAP;AAAA,WAAgB,CAACD,KAAKE,EAAL,CAAQC,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAD,GAA0B,CAACF,KAAKC,EAAL,CAAQC,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAA3C;AAAA,GAFD,CAAP;AAGD;;AAED;;;;IA4BqBC,c,WAxBpB,gBAAO;AACNC,QAAM,CACJ,MADI,EAEJ,OAFI,EAGJ,MAHI,EAIJ,iBAJI,EAKJ,qBALI,EAMJ,QANI,EAOJ,UAPI,EAQJ,qBARI,EASJ;AACEC,SAAK,gBADP;AAEEC,cAAU;AAFZ,GATI,EAaJ;AACED,SAAK,UADP;AAEEC,cAAU;AAFZ,GAbI,EAiBJ;AACED,SAAK,uBADP;AAEEC,cAAU;AAFZ,GAjBI;AADA,CAAP,C;;;AAyBC;;;;;;AAMA,gCAcG;AAAA,QAbDC,IAaC,QAbDA,IAaC;AAAA,QAZDC,KAYC,QAZDA,KAYC;AAAA,QAXDC,IAWC,QAXDA,IAWC;AAAA,QAVDC,eAUC,QAVDA,eAUC;AAAA,QATDC,MASC,QATDA,MASC;AAAA,QARDC,mBAQC,QARDA,mBAQC;AAAA,QAPDC,cAOC,QAPDA,cAOC;AAAA,QANDC,QAMC,QANDA,QAMC;AAAA,QALDC,mBAKC,QALDA,mBAKC;AAAA,4BAJDC,OAIC;AAAA,QAJDA,OAIC,gCAJS,IAIT;AAAA,6BAHDC,QAGC;AAAA,QAHDA,QAGC,iCAHU3B,gBAGV;AAAA,4BAFD4B,OAEC;AAAA,QAFDA,OAEC,gCAFS9B,eAET;AAAA,QADE+B,OACF;AAAA;;AAAA,iLAEIA,OAFJ;AAGCC;AAHD;;AAKD,UAAKC,KAAL,GAAmBC,qBAAN,aAAkBf,IAAlB,EAAwB,MAAxB,CAAb;AACA,UAAKgB,MAAL,GAAoBD,qBAAN,aAAkBd,KAAlB,EAAyB,OAAzB,CAAd;AACA,UAAKgB,KAAL,GAAmBF,qBAAN,aAAkBb,IAAlB,EAAwB,MAAxB,CAAb;AACA,UAAKgB,gBAAL,GAA8BH,qBAAN,aAAkBZ,eAAlB,EAAmC,iBAAnC,CAAxB;AACA,UAAKgB,OAAL,GAAqBJ,qBAAN,aAAkBX,MAAlB,EAA0B,QAA1B,CAAf;AACA;AACA,UAAKgB,SAAL,GAAiBb,QAAjB;AACA,UAAKc,oBAAL,GAA4Bb,mBAA5B;AACA,UAAKc,eAAL,GAAuBhB,cAAvB;AACA,UAAKiB,oBAAL,GAAkCR,qBAAN,aAAkBV,mBAAlB,EAAuC,qBAAvC,CAA5B;AACA;AACA,UAAKmB,QAAL,GAAgB,wCAAyB,MAAKX,WAA9B,CAAhB;AACA,UAAKY,IAAL,GAAY3C,WAAZ;AACA,UAAK4C,OAAL,GAAef,OAAf;AACA,UAAKgB,OAAL,GAAe,EAAf;AACA,UAAKC,QAAL,GAAgBnB,OAAhB;AACA,UAAKC,QAAL,GAAgBA,QAAhB;;AAEA,UAAKmB,WAAL,CAAiB,eAAjB,EACE;AAAA,aACE,sBAAc,MAAKC,WAAnB,EAAgC,CAAhC,KACA,sBAAc,MAAKA,WAAnB,EAAgC,CAAhC,EAAmCC,UAAnC,CAA8C9C,OAFhD;AAAA,KADF,EAKE;AAAA,aACE,sBAAc,MAAK6C,WAAnB,EAAgC,CAAhC,KACA,sBAAc,MAAKA,WAAnB,EAAgC,CAAhC,EAAmCE,QAFrC;AAAA,KALF,EASE,YAAM;AACJ,UAAMC,iBAAiB,sBAAc,MAAKH,WAAnB,EAAgC,CAAhC,CAAvB;AACA,UAAI,CAACG,cAAL,EAAqB;AACnB,eAAO,EAAP;AACD;AACD,aAAO,MAAKC,sBAAL,CAA4BD,eAAeF,UAAf,CAA0BrC,EAAtD,CAAP;AACD,KAfH;AAvBC;AAwCF;;;;wCAEmByC,S,EAAW;AAC7B;AACA,UAAIC,MAAM,CAAC,CAAC,KAAKC,yBAAL,CAA+BF,SAA/B,CAAZ;;AAEA,UAAI,KAAKG,SAAL,IAAkB,CAACF,GAAvB,EAA4B;AAC1B,YAAMG,UAAU,KAAKnB,SAAL,CAAeoB,QAAf,CAAwBC,IAAxB,CAA6B;AAAA,iBAAWF,QAAQ7C,EAAR,KAAeyC,SAA1B;AAAA,SAA7B,CAAhB;AACAC,cAAM,yCAAoBG,OAApB,CAAN;AACD;;AAED,aAAOH,GAAP;AACD;;;8CAEyBD,S,EAAW;AACnC,aAAO,sBAAc,KAAKL,WAAnB,EAAgCW,IAAhC,CAAqC;AAAA,eAAKC,EAAEP,SAAF,KAAgBA,SAArB;AAAA,OAArC,CAAP;AACD;;AAED;;;;;;;;4GAK6BzC,E;;;;;;AAC3B,qBAAKiD,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiBiC,gBADL;AAElBf,8BAAY,KAAKgB,KAAL,CAAWjB,WAAX,CAAuBpC,EAAvB;AAFM,iBAApB;;;uBAK4B,KAAKyB,OAAL,CAAa6B,OAAb,CAAqBC,QAArB,GACvBC,GADuB,oCACcxD,EADd,C;;;AAApByD,2B;AAEAC,wB,GAAWD,YAAYE,IAAZ,E;AACXC,gC,GAAmB,KAAKP,KAAL,CAAWjB,WAAX,CAAuBsB,SAAS1D,EAAhC,C;AACnBqC,0B,GAAa,sBAAc,EAAd,EAAkBuB,iBAAiBvB,UAAnC,C;;AACnBA,2BAAW9C,OAAX,GAAqBmE,SAASnE,OAA9B;AAEEkD,yB,GACEmB,gB,CADFnB,S;;AAEF,qBAAKQ,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiB0C,yBADL;AAElBxB,wCAFkB;AAGlBI;AAHkB,iBAApB;;;;;;;;AAMA;AACA,qBAAKQ,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiB2C,sBADL;AAElBzB,8BAAY,KAAKgB,KAAL,CAAWjB,WAAX,CAAuBpC,EAAvB,CAFM;AAGlB+D,2BAAS,YAAEC,QAAF;AAHS,iBAApB;AAKA;;;;;iDAIO,KAAKX,KAAL,CAAWjB,WAAX,CAAuBpC,EAAvB,C;;;;;;;;;;;;;;;;;AAIX;;;;;;;;6GAK0BA,E;;;;;;AACxB,qBAAKiD,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiB8C,mBADL;AAElB5B,8BAAY,KAAKgB,KAAL,CAAWjB,WAAX,CAAuBpC,EAAvB;AAFM,iBAApB;AAIMuC,8B,GAAiB,KAAKH,WAAL,CAAiBpC,EAAjB,C;;;qBAGjB,KAAK0B,S;;;;;AACP,oBAAIa,cAAJ,EAAoB;AAClB,uBAAKb,SAAL,CAAewC,MAAf,CAAsB3B,eAAeE,SAArC;AACA;AACA,uBAAKhB,OAAL,CAAa6B,OAAb,CAAqBC,QAArB,GACGY,MADH,oCAC2CnE,EAD3C;AAEA,uBAAKiD,KAAL,CAAWC,QAAX,CAAoB;AAClBC,0BAAM,KAAKhC,WAAL,CAAiBiD,4BADL;AAElB/B,gCAAYE,eAAeF;AAFT,mBAApB;AAID,iBATD,MASO;AACL,uBAAKY,KAAL,CAAWC,QAAX,CAAoB;AAClBC,0BAAM,KAAKhC,WAAL,CAAiBkD;AADL,mBAApB;AAGD;;;;;;uBAEK,KAAK5C,OAAL,CAAa6B,OAAb,CAAqBC,QAArB,GACHY,MADG,oCACqCnE,EADrC,C;;;AAEN,qBAAKiD,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiBiD,4BADL;AAElB/B,8BAAYE,eAAeF;AAFT,iBAApB;;;;;;;;;;AAMF;AACA,qBAAKY,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiBkD,yBADL;AAElBN,2BAAS,aAAEC,QAAF;AAFS,iBAApB;;;;kDAMOzB,c;;;;;;;;;;;;;;;;;AAIX;;;;;;;;;;;;;6GAU0BvC,E,EAAIsE,e;YAAiBC,S,uEAAY,K;;;;;;;;AACnDC,+B,GAAkB,KAAKnB,KAAL,CAAWjB,WAAX,CAAuBpC,EAAvB,C;;sBAEtB,CAACwE,eAAD,IACG,CAAC,KAAKC,KADT,IAEG,CAACH,eAFJ,IAGGA,gBAAgBI,SAAhB,KAA8BC,yBAAeC,QAHhD,IAIG,KAAKC,UAAL,CAAgB7E,EAAhB,CAJH,IAKG,CAAC,KAAK2B,oBAAL,CAA0BmD,Y;;;;;AAE9B,qBAAKxD,MAAL,CAAYyD,MAAZ,CAAmB;AACjBhB,2BAASiB,+BAAiBC,SADT;AAEjBC,uBAAK;AAFY,iBAAnB;kDAIO,I;;;AAEDzC,yB,GAAc+B,e,CAAd/B,S;AACFJ,0B,GAAemC,e,CAAfnC,U;;;AAEN,qBAAKY,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiBgE,iBADL;AAElB9C,wCAFkB;AAGlBI;AAHkB,iBAApB;AAKM2C,2B,GAAcd,gBAAgBe,I;;;uBAGP,KAAKC,WAAL,CAAiBhB,eAAjB,C;;;AAArBiB,4B;;uBAEA,KAAK9D,OAAL,CAAa6B,OAAb,CAAqBC,QAArB,GACHiC,IADG,oCACmCxF,EADnC,wBAC0DoF,WAD1D,C;;;;uBAGsB,KAAKK,sBAAL,CAA4BzF,EAA5B,C;;;AAAtB0F,6B;;AACNrD,6BAAaqD,cAAcrD,UAA3B;;AAEA,oBAAIkD,YAAJ,EAAkB;AACVf,kCADU,GACQ,KAAKnB,KAAL,CAAWjB,WAAX,CAAuBpC,EAAvB,CADR;AAEV2F,4BAFU,GAEGrG,kBAAkBkF,iBAAgBnC,UAAhB,CAA2B9C,OAA7C,CAFH;;AAGhBgG,+BAAavF,EAAb,GAAkB2F,WAAWA,WAAWC,MAAX,GAAoB,CAA/B,EAAkC5F,EAApD;AACD;;AAED,qBAAKiD,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiB0E,0BADL;AAElBxD,wCAFkB;AAGlBI,sCAHkB;AAIlB8C;AAJkB,iBAApB;;kDAOOvF,E;;;;;;AAEP,qBAAKiD,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiB2E,uBADL;AAElB/B,2BAAS,aAAEC,QAAF;AAFS,iBAApB;;oBAIKO,S;;;;;kDACI,I;;;;;;;;;;;;;;;;;;;;AAMb;;;;;;;;;6GAM2BvE,E,EAAI+F,O;;;;;AAC7B,qBAAK9C,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiB6E,oBADL;AAElB3D,8BAAY,KAAKgB,KAAL,CAAWjB,WAAX,CAAuBpC,EAAvB;AAFM,iBAApB;;;;uBAMQ,KAAKyB,OAAL,CAAa6B,OAAb,CAAqBC,QAArB,GACHY,MADG,oCACqCnE,EADrC,iBACmD+F,OADnD,C;;;;uBAEA,KAAKN,sBAAL,CAA4BzF,EAA5B,C;;;AACN,qBAAKiD,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiB8E,6BADL;AAElB5D,8BAAY,KAAKgB,KAAL,CAAWjB,WAAX,CAAuBpC,EAAvB;AAFM,iBAApB;;;;;;;;AAKA;AACA,qBAAKiD,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiB+E,0BADL;AAElBnC,2BAAS,aAAEC,QAAF;AAFS,iBAApB;;;;kDAMO,KAAKX,KAAL,CAAWjB,WAAX,CAAuBpC,EAAvB,C;;;;;;;;;;;;;;;;;AAIX;;;;;;;;YAIqBmG,S,uEAAY,K;;;;;;sBAC3B,CAAC,KAAK1B,KAAN,IAAe,CAAC,KAAK9C,oBAAL,CAA0BmD,Y;;;;;AAC5C,qBAAKxD,MAAL,CAAYyD,MAAZ,CAAmB;AACjBhB,2BAASiB,+BAAiBC,SADT;AAEjBC,uBAAK;AAFY,iBAAnB;kDAIO,I;;;oBAEJ,KAAKkB,gBAAL,E;;;;;AACH,oBAAI,CAACD,SAAL,EAAgB;AACd,uBAAK7E,MAAL,CAAYyD,MAAZ,CAAmB;AACjBhB,6BAASsC,8BAAoBC,qBADZ;AAEjBpB,yBAAK;AAFY,mBAAnB;AAID;;kDAEM,I;;;sBAEL,CAAC,KAAK1D,gBAAL,CAAsB+E,WAAvB,KAAuCC,uBAAa3F,Q;;;;;AACtD,oBAAI,CAACsF,SAAL,EAAgB;AACd,uBAAK7E,MAAL,CAAYyD,MAAZ,CAAmB;AACjBhB,6BAASiB,+BAAiBC,SADT;AAEjBC,yBAAK;AAFY,mBAAnB;AAID;;kDAEM,I;;;;uBAEgB,KAAKuB,eAAL,CAAqBN,SAArB,C;;;AAAnB9D,0B;kDACCA,U;;;;;;;;;;;;;;;;;;iCAGI;AAAA;;AACX,WAAKY,KAAL,CAAWyD,SAAX,CAAqB;AAAA,eAAM,OAAKC,cAAL,EAAN;AAAA,OAArB;AACD;;AAED;;;;;;;;;;;;;YAOwBC,gB,uEAAmB,E;;;;;;AACzCA,mCAAmBA,iBAAiBpH,MAAjB,CAAwB;AAAA,yBAAW,CAAC,OAAKqH,mBAAL,CAAyBhE,QAAQ7C,EAAjC,CAAZ;AAAA,iBAAxB,EAChBR,MADgB,CACT;AAAA,yBAAWsH,OAAOC,SAAP,CAAiB/C,QAAjB,CAA0BxD,IAA1B,CAA+BqC,OAA/B,EAAwClD,WAAxC,OAA0D,iBAArE;AAAA,iBADS,CAAnB;;oBAGKiH,iBAAiBhB,M;;;;;AACpB,qBAAKtE,MAAL,CAAY0F,OAAZ,CAAoB;AAClBjD,2BAASiB,+BAAiBiC;AADR,iBAApB;;;;;AAMF,qBAAKhE,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiB+F;AADL,iBAApB;;AAIIC,4B;AACAC,4B,GAAe,I;;qBAEf,KAAK1F,S;;;;;AACP;;;;;AAKAyF,+BAAeP,iBACZS,GADY,CACR;AAAA,yBAAmB,OAAK3F,SAAL,CAAe4F,SAAf,CAAyB9D,GAAzB,CAA6Bc,gBAAgBtE,EAA7C,CAAnB;AAAA,iBADQ,CAAf;;AAGA;;;;AAIMuH,0B,GAAaX,iBAAiBS,GAAjB,CAAqB;AAAA,yBAAKG,EAAExH,EAAP;AAAA,iBAArB,C;;AACnB,qBAAK0B,SAAL,CAAe+F,iBAAf,CAAiCF,UAAjC;;AAEMG,qB,GAAQP,aAAaE,GAAb,CAAiB,UAACM,QAAD,EAAc;AAC3C,sBAAMC,IAAI,sBAAY,UAACC,OAAD,EAAa;AACjCF,6BAASG,EAAT,CAAY,YAAZ,EAA0B,YAAM;AAC9BD;AACD,qBAFD;AAGD,mBAJS,CAAV;AAKA,yBAAOD,CAAP;AACD,iBAPa,C;;uBASR,kBAAQG,GAAR,EAAa,KAAKC,kBAAL,CAAwBpB,gBAAxB,CAAb,0CAA2Dc,KAA3D,IACHO,IADG,CACE,YAAM;AACV,yBAAKhF,KAAL,CAAWC,QAAX,CAAoB;AAClBC,0BAAM,OAAKhC,WAAL,CAAiB+G;AADL,mBAApB;AAGD,iBALG,EAKD,YAAM;AACP,sBAAM1D,kBAAkB,sBAAc,OAAKpC,WAAnB,EAAgC,CAAhC,CAAxB;AACA;;;;AAIA,sBAAIoC,mBAAmBA,gBAAgBlC,QAAhB,CAAyBsD,MAAzB,GAAkC,CAAzD,EAA4D;AAC1D,2BAAK3B,mBAAL,CAAyBO,gBAAgBnC,UAAhB,CAA2BrC,EAApD;AACD;AACD,yBAAKsB,MAAL,CAAY0F,OAAZ,CAAoB;AAClBjD,6BAASiB,+BAAiBiC;AADR,mBAApB;AAGA,yBAAKhE,KAAL,CAAWC,QAAX,CAAoB;AAClBC,0BAAM,OAAKhC,WAAL,CAAiBgH;AADL,mBAApB;AAGD,iBApBG,C;;;AAqBN,qBAAKzG,SAAL,CAAe0G,mBAAf;;;;;;;uBAGuB,KAAKJ,kBAAL,CAAwBpB,gBAAxB,C;;;AAArBQ,4B;;;AAEA,qBAAKnE,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiB+G;AADL,iBAApB;;;;;;;AAIM1D,+B,GAAkB,sBAAc,KAAKpC,WAAnB,EAAgC,CAAhC,C;AACxB;;;;;AAIA,oBAAIoC,mBAAmBA,gBAAgBnC,UAAhB,CAA2B9C,OAA3B,CAAmCqG,MAAnC,GAA4C,CAAnE,EAAsE;AACpE,uBAAK3B,mBAAL,CAAyBO,gBAAgBnC,UAAhB,CAA2BrC,EAApD;AACD;AACD,qBAAKsB,MAAL,CAAY0F,OAAZ,CAAoB;AAClBjD,2BAASiB,+BAAiBiC;AADR,iBAApB;;;AAIF,oBAAI,CAACE,YAAD,IAAiBC,iBAAiB,IAAtC,EAA4C;AAC1C,uBAAKnE,KAAL,CAAWC,QAAX,CAAoB;AAClBC,0BAAM,KAAKhC,WAAL,CAAiBgH;AADL,mBAApB;AAGD;;;;;;;;;;;;;;;;;AAIL;;;;;;;yCAK8C;AAAA,UAA9BE,aAA8B,SAA9BA,aAA8B;AAAA,UAAfC,WAAe,SAAfA,WAAe;;AAC5C,UAAID,aAAJ,EAAmB;AACjB,eAAO,KAAKpF,KAAL,CAAWC,QAAX,CAAoB;AACzBC,gBAAM,KAAKhC,WAAL,CAAiBoH,iBADE;AAEzBF;AAFyB,SAApB,CAAP;AAID;AACD,aAAO,KAAKpF,KAAL,CAAWC,QAAX,CAAoB;AACzBC,cAAM,KAAKhC,WAAL,CAAiBqH,eADE;AAEzBF;AAFyB,OAApB,CAAP;AAID;;;2CAEsBtI,E,EAAI;AACzB,UAAMuC,iBAAiB,KAAKH,WAAL,CAAiBpC,EAAjB,CAAvB;;AAEA,UAAIuC,cAAJ,EAAoB;AAClB,eAAOjD,kBAAkBiD,eAAeF,UAAf,CAA0B9C,OAA5C,EACJkJ,MADI,CACG,UAACC,KAAD,EAAQjJ,KAAR,EAAekJ,GAAf,EAAuB;AAC7B,cAAIlJ,MAAMmJ,MAAN,CAAaC,IAAb,CAAkBlJ,WAAlB,OAAoCmJ,0BAAgBC,YAAxD,EAAsE;AACpE;AACAL,kBAAMM,IAAN,CAAW,EAAEL,QAAF,EAAOlJ,YAAP,EAAX;AACD;AACD,iBAAOiJ,KAAP;AACD,SAPI,EAOF,EAPE,EAQJrB,GARI,CAQA;AAAA,cAAGsB,GAAH,SAAGA,GAAH;AAAA,cAAQlJ,KAAR,SAAQA,KAAR;AAAA,4CAA0BA,KAA1B,EAAoC8C,eAAeD,QAAf,CAAwBqG,GAAxB,CAApC;AAAA,SARA,EASJnJ,MATI,CASG;AAAA,iBAAK,CAAC,CAACyJ,CAAP;AAAA,SATH,CAAP;AAUD;AACD,aAAO,IAAP;AACD;;;qCAEgBjJ,E,EAAI;AACnB,UAAMuC,iBAAiB,KAAKH,WAAL,CAAiBpC,EAAjB,CAAvB;AACA,UAAIuC,cAAJ,EAAoB;AAClB,eAAOA,eAAeF,UAAf,CAA0B9C,OAA1B,CAAkCC,MAAlC,CACL;AAAA,iBAAKoI,EAAEgB,MAAF,CAASC,IAAT,CAAclJ,WAAd,OAAgCmJ,0BAAgBC,YAArD;AAAA,SADK,CAAP;AAGD;AACD,aAAO,IAAP;AACD;;;uCAEkB/I,E,EAAI;AACrB,UAAM0C,MAAM,KAAKwG,gBAAL,CAAsBlJ,EAAtB,CAAZ;AACA,aAAOmJ,MAAMC,OAAN,CAAc1G,GAAd,IAAqBA,IAAIkD,MAAzB,GAAkC,IAAzC;AACD;;;+BAEU5F,E,EAAI;AACb,aAAO,KAAKqJ,kBAAL,CAAwBrJ,EAAxB,KAA+B,KAAKgB,QAA3C;AACD;;;;8GAGkChB,E;;;;;;;sBAC7B,KAAKiC,OAAL,CAAajC,EAAb,KAAoB,CAAC,KAAKkC,Q;;;;;;;;;uBAIxB,KAAKuD,sBAAL,CAA4BzF,EAA5B,C;;;AACN,qBAAKiC,OAAL,CAAajC,EAAb,IAAmBsJ,oFACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACQ,OAAK7D,sBAAL,CAA4BzF,EAA5B,CADR;;AAAA;AAEE,iCAAKuJ,2BAAL,CAAiCvJ,EAAjC;AACA,8BAAI,OAAKoC,WAAL,CAAiBpC,EAAjB,CAAJ,EAA0B;AACxB,mCAAKwJ,4BAAL,CAAkCxJ,EAAlC;AACD;;AALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADiB,IAQjB,KAAK+B,IARY,CAAnB;;;;;;;;;;;;;;;;;;gDAW0B/B,E,EAAI;AAC9ByJ,mBAAa,KAAKxH,OAAL,CAAajC,EAAb,CAAb;AACA,aAAO,KAAKiC,OAAL,CAAajC,EAAb,CAAP;AACD;;;kCAEa;AACZ,WAAKkC,QAAL,GAAgB,IAAhB;AACD;;;mCAEc;AACb,WAAKA,QAAL,GAAgB,KAAhB;AACD;;;oCAEe;AACd,WAAKA,QAAL,GAAgB,CAAC,KAAKnB,OAAtB;AACD;;;kCAEwC;AAAA,UAA7BC,QAA6B,uEAAlB3B,gBAAkB;;AACvC,UAAI,OAAO2B,QAAP,KAAoB,QAAxB,EAAkC;AAChC,cAAM,IAAI0I,KAAJ,CAAU,8BAAV,CAAN;AACD;AACD,WAAK1I,QAAL,GAAgBA,QAAhB;AACA,aAAOA,QAAP;AACD;;;iCAEqC;AAAA,UAA3BC,OAA2B,uEAAjB9B,eAAiB;;AACpC,UAAI,OAAO8B,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,cAAM,IAAIyI,KAAJ,CAAU,8BAAV,CAAN;AACD;AACD,WAAK1H,OAAL,GAAef,OAAf;AACA,aAAOA,OAAP;AACD;;;4BAEO;AACN,WAAKgC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,cAAM,KAAKhC,WAAL,CAAiBwI;AADL,OAApB;AAGD;;;;;;;;;AAGC,oBAAI,KAAKC,WAAL,EAAJ,EAAwB;AACtB,uBAAKC,KAAL;AACD,iBAFD,MAEO,IAAI,KAAKC,YAAL,EAAJ,EAAyB;AAC9B,uBAAKC,MAAL;AACD;;;;;;;;;;;;;;;;;;6BAGM;AACP,WAAK9G,KAAL,CAAWC,QAAX,CAAoB;AAClBC,cAAM,KAAKhC,WAAL,CAAiB6I;AADL,OAApB;AAGD;;;kCAEa;AACZ,aACG,KAAK5I,KAAL,CAAW6I,QAAX,IAAuB,KAAK7I,KAAL,CAAWqD,KAAnC,IACA,KAAKnD,MAAL,CAAYmD,KADZ,IAEA,KAAKjD,gBAAL,CAAsBiD,KAFtB,IAGA,KAAKlD,KAAL,CAAWkD,KAHX,IAIA,KAAK5C,oBAAL,CAA0B4C,KAJ1B,IAKA,KAAK9C,oBAAL,CAA0B8C,KAL1B,IAMA,KAAKyF,OAPP;AASD;;;mCAEc;AACb,aACE,CACG,CAAC,KAAK9I,KAAL,CAAW6I,QAAZ,IAAwB,CAAC,KAAK7I,KAAL,CAAWqD,KAArC,IACG,CAAC,KAAKnD,MAAL,CAAYmD,KADhB,IAEG,CAAC,KAAKjD,gBAAL,CAAsBiD,KAF1B,IAGG,CAAC,KAAKlD,KAAL,CAAWkD,KAHf,IAIG,CAAC,KAAK5C,oBAAL,CAA0B4C,KAJ9B,IAKG,CAAC,KAAK9C,oBAAL,CAA0B8C,KANhC,KAQA,KAAKA,KATP;AAWD;;;uCAEkB;AACjB,UAAI,CAAC,KAAK5C,oBAAL,CAA0BsI,cAA3B,IAA6C,CAAC,KAAKtI,oBAAL,CAA0BuI,eAA5E,EAA6F;AAC3F,aAAK9I,MAAL,CAAYyD,MAAZ,CAAmB;AACjBhB,mBAASsC,8BAAoBC,qBADZ;AAEjBpB,eAAK;AAFY,SAAnB;AAIA,eAAO,KAAP;AACD;AACD,aAAO,IAAP;AACD;;;oCAGe7C,U,EAAYQ,O,EAAS;AAAA;;AACnC,OAAC,UAAD,EAAawH,OAAb,CACE;AAAA,eAAOxH,QAAQiF,EAAR,CACLwC,GADK,EAEL;AAAA,iBAAM,OAAKd,4BAAL,CAAkCnH,WAAWrC,EAA7C,CAAN;AAAA,SAFK,CAAP;AAAA,OADF;AAMA,OAAC,YAAD,EAAe,QAAf,EAAyB,UAAzB,EAAqCqK,OAArC,CACE;AAAA,eAAOxH,QAAQiF,EAAR,CAAWwC,GAAX,EAAgB,YAAM;AAC3B,iBAAKrH,KAAL,CAAWC,QAAX,CAAoB;AAClBC,kBAAM,OAAKhC,WAAL,CAAiBiD,4BADL;AAElB/B;AAFkB,WAApB;AAIA,iBAAKkH,2BAAL,CAAiClH,WAAWrC,EAA5C;AACD,SANM,CAAP;AAAA,OADF;AASD;;;;;;;YAGwB4G,gB,uEAAmB,E;;;;;;;;AACpCpC,+B,GAAkB,sBAAc,KAAKpC,WAAnB,EAAgC,CAAhC,C;;qBAEpBoC,e;;;;;AACI4C,4B,GAAe5C,gBAAgBnC,UAAhB,CAA2BrC,E;;AAChD,qBAAKuJ,2BAAL,CAAiCnC,YAAjC;AACA;;;;;uDAC8BR,gB;;;;;;;;AAAnBtC,+B;;uBACH,KAAKiG,mBAAL,CAAyBnD,YAAzB,EAAuC9C,eAAvC,EAAwD,IAAxD,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAEH,KAAKlC,WAAL,CAAiBgF,YAAjB,EAA+B9E,QAA/B,CAAwCsD,M;;;;;sBACrC,IAAI8D,KAAJ,CAAU,sEAAV,C;;;AAER,qBAAKF,4BAAL,CAAkCpC,YAAlC;mDACOA,Y;;;;uBAEY,KAAKoD,cAAL,CAAoB,IAApB,C;;;;AAAbxK,kB,UAAAA,E;AACJyK,iC,GAAoB,K;;uBAClB,kBAAQC,IAAR,CAAa,CACjB,sBAAY,UAAC7C,OAAD,EAAU8C,MAAV,EAAqB;AAC/B,sBAAM9H,UAAU,OAAKnB,SAAL,CAAe4F,SAAf,CAAyB9D,GAAzB,CAA6B,OAAKpB,WAAL,CAAiBpC,EAAjB,EAAqByC,SAAlD,CAAhB;AACAI,0BAAQiF,EAAR,CAAW,UAAX,EAAuB,YAAM;AAC3B2C,wCAAoB,IAApB;AACA5C;AACD,mBAHD;AAIAhF,0BAAQiF,EAAR,CAAW,QAAX,EAAqB;AAAA,2BAAM6C,OAAO,IAAIjB,KAAJ,CAAU,oBAAV,CAAP,CAAN;AAAA,mBAArB;AACA7G,0BAAQiF,EAAR,CAAW,QAAX,EAAqB;AAAA,2BAAM6C,OAAO,IAAIjB,KAAJ,CAAU,oBAAV,CAAP,CAAN;AAAA,mBAArB;AACA7G,0BAAQiF,EAAR,CAAW,UAAX,EAAuB;AAAA,2BAAM6C,OAAO,IAAIjB,KAAJ,CAAU,sBAAV,CAAP,CAAN;AAAA,mBAAvB;AACA7G,0BAAQiF,EAAR,CAAW,YAAX,EAAyB;AAAA,2BAAM6C,OAAO,IAAIjB,KAAJ,CAAU,wBAAV,CAAP,CAAN;AAAA,mBAAzB;AACD,iBAVD,CADiB,EAYjB,sBAAY,UAAC7B,OAAD,EAAU8C,MAAV,EAAqB;AAC/BrB,6BAAW;AAAA,2BAAOmB,oBAAoB5C,SAApB,GAAgC8C,OAAO,IAAIjB,KAAJ,CAAU,qBAAV,CAAP,CAAvC;AAAA,mBAAX,EACI,OAAK1H,OADT;AAED,iBAHD,CAZiB,CAAb,C;;;;uBAkBA,KAAKgG,kBAAL,CAAwBpB,gBAAxB,C;;;mDACC5G,E;;;;;;;;;;;;;;;;;;;;YAIamG,S,uEAAY,K;;;;;;;;AAE9B,qBAAKlD,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiBqJ;AADL,iBAApB;;AAIA;;uBAC0B,KAAK/I,OAAL,CAAa6B,OAAb,CAAqBC,QAArB,GACvBiC,IADuB,CAClB,iCADkB,EACiB,EADjB,C;;;AAApB/B,2B;AAEAC,wB,GAAWD,YAAYE,IAAZ,E;AACXtB,0B,GAAaqB,SAASb,O;AACtB+H,2B,GAAcvI,WAAWwI,c;AAC/B;;;uBACsB,KAAKtJ,KAAL,CAAWf,IAAX,CAAgB;AACpCoK,0CADoC;AAEpCE,gCAAc;AAFsB,iBAAhB,C;;;AAAhBjI,uB;;;AAKN,oBAAI,QAAOA,OAAP,uDAAOA,OAAP,OAAmB,QAAnB,IACFiE,OAAOC,SAAP,CAAiB/C,QAAjB,CAA0BxD,IAA1B,CAA+BqC,QAAQiF,EAAvC,EAA2CnI,WAA3C,OAA6D,mBAD/D,EACoF;AAClF,uBAAKoL,eAAL,CAAqB1I,UAArB,EAAiCQ,OAAjC;;AAEA,uBAAKI,KAAL,CAAWC,QAAX,CAAoB;AAClBC,0BAAM,KAAKhC,WAAL,CAAiB6J,uBADL;AAElB3I,0CAFkB;AAGlBI,+BAAWI,QAAQ7C,EAHD;AAIlBT,6BAAS;AAJS,mBAApB;AAMD,iBAVD,MAUO;AACL,uBAAK0D,KAAL,CAAWC,QAAX,CAAoB;AAClBC,0BAAM,KAAKhC,WAAL,CAAiB8J;AADL,mBAApB;AAGD;;mDAEM5I,U;;;;;;AAEP,qBAAKY,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKhC,WAAL,CAAiB8J,oBADL;AAElBlH,2BAAS,cAAEC,QAAF;AAFS,iBAApB;;oBAKKmC,S;;;;;AACH,qBAAK7E,MAAL,CAAY0F,OAAZ,CAAoB;AAClBjD,2BAASiB,+BAAiBiG;AADR,iBAApB;mDAGO,I;;;;;;;;;;;;;;;;;;;;;;+GAQKC,e;;;;;;oBACX,KAAKtJ,e;;;;;mDACD,I;;;AAEHiB,uB,GAAU,KAAKnB,SAAL,CAAeoB,QAAf,CAAwBC,IAAxB,CAA6B;AAAA,yBAAWF,QAAQ7C,EAAR,KAAekL,gBAAgBlL,EAA1C;AAAA,iBAA7B,C;AAEdmL,kB,GACEtI,O,CADFsI,E,EAAIC,Y,GACFvI,O,CADEuI,Y,EAAcC,I,GAChBxI,O,CADgBwI,I,EAAMC,U,GACtBzI,O,CADsByI,U,EAAY5G,S,GAClC7B,O,CADkC6B,S;AAGhC6G,0B,GAAe1I,O,CAAf0I,U;AACFC,yB;AACAC,oB;AACAC,2B;;;AAEJ,oBAAIhH,cAAcC,yBAAeC,QAAjC,EAA2C;AACzC8G,gCAAcP,EAAd;AACD,iBAFD,MAEO;AACLO,gCAAcJ,UAAd;AACD;;AAED;;uBACM,KAAK1J,eAAL,CAAqB+J,KAArB,CAA2B;AAC/BC,2BAAS,CAACF,WAAD,CADsB;AAE/BG,+BAAa;AAFkB,iBAA3B,C;;;;AAKN,oBAAI,KAAKjK,eAAL,IAAwB,KAAKA,eAAL,CAAqBkK,WAAjD,EAA8D;AACtDC,gCADsD,GACrC,KAAKnK,eAAL,CAAqBkK,WADgB;AAExDE,yBAFwD,GAE9CZ,YAF8C;AAGxDa,6BAHwD;;;AAK5D,sBAAIvH,cAAcC,yBAAeC,QAAjC,EAA2C;AACzCqH,kCAAeF,kBAAkBA,eAAeZ,EAAf,CAAnB,IAA0C,EAAxD;AACD,mBAFD,MAEO;AACLc,kCAAeF,kBAAkBA,eAAeV,IAAf,CAAnB,IAA4C,EAA1D;AACD;;AAED,sBAAI,CAACW,OAAL,EAAc;AACZA,8BAAUC,eAAeA,YAAY,CAAZ,CAAzB;AACD;AACD,sBAAID,OAAJ,EAAa;AACXR,gCAAYQ,QAAQE,eAApB;AACAX,iCAAaS,QAAQG,IAArB;AACAV,2BAAOO,QAAQhM,EAAf;AACD;AACF;;mDAEM;AACLwL,sCADK;AAELD,wCAFK;AAGLG,0CAHK;AAILD;AAJK,iB;;;;;;;;;;;;;;;;;;;;YASOhJ,S,UAAAA,S;;;;;;AACRI,uB,GAAU,KAAKnB,SAAL,CAAe4F,SAAf,CAAyB9D,GAAzB,CAA6Bf,SAA7B,C;AACV2J,+B,GAAkBvJ,QAAQwJ,QAAR,GAAmBC,K;;AAC3C,qBAAKC,aAAL,CAAmB,EAAEjE,aAAa7F,SAAf,EAAnB;AACM+J,kC,GAAqB,KAAK9K,SAAL,CAAe4F,SAAf,CAAyB9D,GAAzB,CAA6B,KAAKiJ,WAAL,CAAiBpE,aAA9C,C;AACrBzB,gC,GAAmB4F,qBACrB,CAACA,kBAAD,EAAqB3J,OAArB,CADqB,GAErB,CAACA,OAAD,C;;uBACE,KAAK6J,iBAAL,CAAuB9F,gBAAvB,C;;;AACArE,8B,GAAiB,sBAAc,KAAKH,WAAnB,EAAgC,CAAhC,C;AACjBuK,iC,GAAoB,KAAKjL,SAAL,CAAe4F,SAAf,CAAyB9D,GAAzB,CAA6BjB,eAAeE,SAA5C,C;AACpBmK,kC,GAAqBD,kBAAkBN,QAAlB,GAA6BC,K;;oBAEnD/J,c;;;;;;uBACG,KAAKb,SAAL,CAAemL,MAAf,CAAsBhK,QAAQ7C,EAA9B,C;;;mDACC,I;;;qBAGLoM,e;;;;;AACF,qBAAK1K,SAAL,CAAeoL,IAAf,CAAoBvK,eAAeE,SAAnC;mDACOF,c;;;qBAGLqK,kB;;;;;AACF;;;;AAIA,qBAAKlL,SAAL,CAAemL,MAAf,CAAsBtK,eAAeE,SAArC;mDACOF,c;;;mDAEF,I;;;;;;;;;;;;;;;;;;wBAGI;AACX,aAAO,KAAKc,KAAL,CAAWuF,MAAlB;AACD;;;wBAEiB;AAChB,aAAO,KAAKvF,KAAL,CAAWjB,WAAlB;AACD;;;wBAE0B;AACzB,aAAO,KAAKiB,KAAL,CAAW0J,oBAAlB;AACD;;;wBAEe;AACd,aAAO,KAAK1J,KAAL,CAAWT,SAAlB;AACD;;;wBAEiB;AAChB,aAAO,KAAKS,KAAL,CAAWoJ,WAAlB;AACD;;;wBAEmB;AAClB,aAAO,KAAKO,UAAL,CAAgBC,aAAhB,EAAP;AACD;;;EA/xByCC,kB,4EAmFzCC,iB,kLAwCAA,iB,+KAqDAA,iB,gLAmEAA,iB,2KA8BAA,iB,wKA2CAA,iB,uKAkGAA,iB,kLAmDAA,iB,oLA4GAA,iB,0KAmBAA,iB,0KAyCAA,iB,mKAqDAA,iB,2JAwDAA,iB;kBAtuBkBjN,c","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport callDirections from '../../enums/callDirections';\nimport RcModule from '../../lib/RcModule';\nimport actionTypes from './actionTypes';\nimport partyStatusCode from './partyStatusCode';\nimport conferenceRole from './conferenceRole';\nimport getConferenceCallReducer from './getConferenceCallReducer';\nimport proxify from '../../lib/proxy/proxify';\nimport permissionsMessages from '../RolesAndPermissions/permissionsMessages';\nimport conferenceErrors from './conferenceCallErrors';\nimport { isConferenceSession } from '../Webphone/webphoneHelper';\n// import webphoneErrors from '../Webphone/webphoneErrors';\nimport ensureExist from '../../lib/ensureExist';\n// import sleep from '../../lib/sleep';\nimport callingModes from '../CallingSettings/callingModes';\n\nconst DEFAULT_TIMEOUT = 30000;// time out for conferencing session being accepted.\nconst DEFAULT_TTL = 5000;// timer to update the conference information\nconst MAXIMUM_CAPACITY = 10;\n\n\nfunction ascendSortParties(parties) {\n  return parties\n    .filter(party => party.conferenceRole.toLowerCase() !== conferenceRole.host)\n    .sort((last, next) => +last.id.split('-')[1] - (+next.id.split('-')[1]));\n}\n\n/**\n * @class\n * @description ConferenceCall managing module\n */\n@Module({\n  deps: [\n    'Auth',\n    'Alert',\n    'Call',\n    'CallingSettings',\n    'ConnectivityMonitor',\n    'Client',\n    'Webphone',\n    'RolesAndPermissions',\n    {\n      dep: 'ContactMatcher',\n      optional: true\n    },\n    {\n      dep: 'Webphone',\n      optional: true\n    },\n    {\n      dep: 'ConferenceCallOptions',\n      optional: true\n    },\n  ]\n})\nexport default class ConferenceCall extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    auth,\n    alert,\n    call,\n    callingSettings,\n    client,\n    rolesAndPermissions,\n    contactMatcher,\n    webphone,\n    connectivityMonitor,\n    pulling = true,\n    capacity = MAXIMUM_CAPACITY,\n    timeout = DEFAULT_TIMEOUT,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = this::ensureExist(auth, 'auth');\n    this._alert = this::ensureExist(alert, 'alert');\n    this._call = this::ensureExist(call, 'call');\n    this._callingSettings = this::ensureExist(callingSettings, 'callingSettings');\n    this._client = this::ensureExist(client, 'client');\n    // in order to run the integeration test, we need it to be optional\n    this._webphone = webphone;\n    this._connectivityMonitor = connectivityMonitor;\n    this._contactMatcher = contactMatcher;\n    this._rolesAndPermissions = this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    // we need the constructed actions\n    this._reducer = getConferenceCallReducer(this.actionTypes);\n    this._ttl = DEFAULT_TTL;\n    this._timout = timeout;\n    this._timers = {};\n    this._pulling = pulling;\n    this.capacity = capacity;\n\n    this.addSelector('partyProfiles',\n      () => (\n        Object.values(this.conferences)[0] &&\n        Object.values(this.conferences)[0].conference.parties\n      ),\n      () => (\n        Object.values(this.conferences)[0] &&\n        Object.values(this.conferences)[0].profiles\n      ),\n      () => {\n        const conferenceData = Object.values(this.conferences)[0];\n        if (!conferenceData) {\n          return [];\n        }\n        return this.getOnlinePartyProfiles(conferenceData.conference.id);\n      },\n    );\n  }\n\n  isConferenceSession(sessionId) {\n    // only can be used after webphone._onCallStartFunc\n    let res = !!this.findConferenceWithSession(sessionId);\n\n    if (this.isMerging && !res) {\n      const session = this._webphone.sessions.find(session => session.id === sessionId);\n      res = isConferenceSession(session);\n    }\n\n    return res;\n  }\n\n  findConferenceWithSession(sessionId) {\n    return Object.values(this.conferences).find(c => c.sessionId === sessionId);\n  }\n\n  /**\n   *\n   * @param {string} id: conference id\n   */\n  @proxify\n  async updateConferenceStatus(id) {\n    this.store.dispatch({\n      type: this.actionTypes.updateConference,\n      conference: this.state.conferences[id],\n    });\n    try {\n      const rawResponse = await this._client.service.platform()\n        .get(`/account/~/telephony/sessions/${id}`);\n      const response = rawResponse.json();\n      const storedconference = this.state.conferences[response.id];\n      const conference = Object.assign({}, storedconference.conference);\n      conference.parties = response.parties;\n      const {\n        sessionId\n      } = storedconference;\n      this.store.dispatch({\n        type: this.actionTypes.updateConferenceSucceeded,\n        conference,\n        sessionId,\n      });\n    } catch (e) {\n      // TODO: alert\n      this.store.dispatch({\n        type: this.actionTypes.updateConferenceFailed,\n        conference: this.state.conferences[id],\n        message: e.toString()\n      });\n      // need to propagate to out side try...catch block\n      throw e;\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return this.state.conferences[id];\n    }\n  }\n\n  /**\n   * terminate a conference.\n   * @param {string} id: conference id\n   */\n  @proxify\n  async terminateConference(id) {\n    this.store.dispatch({\n      type: this.actionTypes.terminateConference,\n      conference: this.state.conferences[id],\n    });\n    const conferenceData = this.conferences[id];\n\n    try {\n      if (this._webphone) {\n        if (conferenceData) {\n          this._webphone.hangup(conferenceData.sessionId);\n          // Help server to do the GC, and we don't care the whether it's successful or not\n          this._client.service.platform()\n            .delete(`/account/~/telephony/sessions/${id}`);\n          this.store.dispatch({\n            type: this.actionTypes.terminateConferenceSucceeded,\n            conference: conferenceData.conference,\n          });\n        } else {\n          this.store.dispatch({\n            type: this.actionTypes.terminateConferenceFailed,\n          });\n        }\n      } else {\n        await this._client.service.platform()\n          .delete(`/account/~/telephony/sessions/${id}`);\n        this.store.dispatch({\n          type: this.actionTypes.terminateConferenceSucceeded,\n          conference: conferenceData.conference,\n        });\n      }\n    } catch (e) {\n      // TODO:this._alert.warning\n      this.store.dispatch({\n        type: this.actionTypes.terminateConferenceFailed,\n        message: e.toString()\n      });\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return conferenceData;\n    }\n  }\n\n  /**\n   * Bring-in an outbound call into conference.\n   * @param {string} id: conference id\n   * @param {webphone.session} webphoneSession: get it from callMonitor.\\w+Calls[\\d+]\n   * interface SessionData{\n   *  \"party-id\": String,\n   *  \"session-id\": String\n   * }\n   */\n  @proxify\n  async bringInToConference(id, webphoneSession, propagete = false) {\n    const conferenceState = this.state.conferences[id];\n    if (\n      !conferenceState\n      || !this.ready\n      || !webphoneSession\n      || webphoneSession.direction !== callDirections.outbound\n      || this.isOverload(id)\n      || !this._connectivityMonitor.connectivity\n    ) {\n      this._alert.danger({\n        message: conferenceErrors.modeError,\n        ttl: 0,\n      });\n      return null;\n    }\n    const { sessionId } = conferenceState;\n    let { conference } = conferenceState;\n\n    this.store.dispatch({\n      type: this.actionTypes.bringInConference,\n      conference,\n      sessionId,\n    });\n    const sessionData = webphoneSession.data;\n\n    try {\n      const partyProfile = await this._getProfile(webphoneSession);\n\n      await this._client.service.platform()\n        .post(`/account/~/telephony/sessions/${id}/parties/bring-in`, sessionData);\n\n      const newConference = await this.updateConferenceStatus(id);\n      conference = newConference.conference;\n\n      if (partyProfile) {\n        const conferenceState = this.state.conferences[id];\n        const newParties = ascendSortParties(conferenceState.conference.parties);\n        partyProfile.id = newParties[newParties.length - 1].id;\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.bringInConferenceSucceeded,\n        conference,\n        sessionId,\n        partyProfile,\n      });\n\n      return id;\n    } catch (e) {\n      this.store.dispatch({\n        type: this.actionTypes.bringInConferenceFailed,\n        message: e.toString()\n      });\n      if (!propagete) {\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * remove a participant from conference.\n   * @param {string} id: conference id\n   * @param {SessionData} partyId: one participant's id of an conference's `parties` list\n   */\n  @proxify\n  async removeFromConference(id, partyId) {\n    this.store.dispatch({\n      type: this.actionTypes.removeFromConference,\n      conference: this.state.conferences[id],\n    });\n\n    try {\n      await this._client.service.platform()\n        .delete(`/account/~/telephony/sessions/${id}/parties/${partyId}`);\n      await this.updateConferenceStatus(id);\n      this.store.dispatch({\n        type: this.actionTypes.removeFromConferenceSucceeded,\n        conference: this.state.conferences[id],\n      });\n    } catch (e) {\n      // TODO:this._alert.warning\n      this.store.dispatch({\n        type: this.actionTypes.removeFromConferenceFailed,\n        message: e.toString()\n      });\n    } finally {\n      // eslint-disable-next-line no-unsafe-finally\n      return this.state.conferences[id];\n    }\n  }\n\n  /**\n   * start a conference call, return the session\n   */\n  @proxify\n  async makeConference(propagate = false) {\n    if (!this.ready || !this._connectivityMonitor.connectivity) {\n      this._alert.danger({\n        message: conferenceErrors.modeError,\n        ttl: 0,\n      });\n      return null;\n    }\n    if (!this._checkPermission()) {\n      if (!propagate) {\n        this._alert.danger({\n          message: permissionsMessages.insufficientPrivilege,\n          ttl: 0,\n        });\n      }\n\n      return null;\n    }\n    if (!this._callingSettings.callingMode === callingModes.webphone) {\n      if (!propagate) {\n        this._alert.danger({\n          message: conferenceErrors.modeError,\n          ttl: 0,\n        });\n      }\n\n      return null;\n    }\n    const conference = await this._makeConference(propagate);\n    return conference;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  /**\n   * Merge calls to (or create) a conference.\n   * @param {webphone.sessions} webphoneSessions\n   * FIXME: dynamically construct this function during the construction\n   * to avoid `this._webphone` criterias to improve performance ahead of time\n   */\n  @proxify\n  async mergeToConference(webphoneSessions = []) {\n    webphoneSessions = webphoneSessions.filter(session => !this.isConferenceSession(session.id))\n      .filter(session => Object.prototype.toString.call(session).toLowerCase() === '[object object]');\n\n    if (!webphoneSessions.length) {\n      this._alert.warning({\n        message: conferenceErrors.bringInFailed,\n      });\n      return;\n    }\n\n    this.store.dispatch({\n      type: this.actionTypes.mergeStart,\n    });\n\n    let sipInstances;\n    let conferenceId = null;\n\n    if (this._webphone) {\n      /**\n       * Because the concurrency behaviour of the server,\n       * we cannot sure the merging process is over when\n       * the function's procedure has finshed.\n       */\n      sipInstances = webphoneSessions\n        .map(webphoneSession => this._webphone._sessions.get(webphoneSession.id));\n\n      /**\n       * HACK: we need to preserve the merging session in prevent the glitch of\n       * the call control page.\n       */\n      const sessionIds = webphoneSessions.map(x => x.id);\n      this._webphone.setSessionCaching(sessionIds);\n\n      const pSips = sipInstances.map((instance) => {\n        const p = new Promise((resolve) => {\n          instance.on('terminated', () => {\n            resolve();\n          });\n        });\n        return p;\n      });\n\n      await Promise.all([this._mergeToConference(webphoneSessions), ...pSips])\n        .then(() => {\n          this.store.dispatch({\n            type: this.actionTypes.mergeSucceeded,\n          });\n        }, () => {\n          const conferenceState = Object.values(this.conferences)[0];\n          /**\n           * if create conference successfully but failed to bring-in,\n           *  then terminate the conference.\n           */\n          if (conferenceState && conferenceState.profiles.length < 1) {\n            this.terminateConference(conferenceState.conference.id);\n          }\n          this._alert.warning({\n            message: conferenceErrors.bringInFailed,\n          });\n          this.store.dispatch({\n            type: this.actionTypes.mergeFailed,\n          });\n        });\n      this._webphone.clearSessionCaching();\n    } else {\n      try {\n        conferenceId = await this._mergeToConference(webphoneSessions);\n\n        this.store.dispatch({\n          type: this.actionTypes.mergeSucceeded,\n        });\n      } catch (e) {\n        const conferenceState = Object.values(this.conferences)[0];\n        /**\n         * if create conference successfully but failed to bring-in,\n         *  then terminate the conference.\n         */\n        if (conferenceState && conferenceState.conference.parties.length < 1) {\n          this.terminateConference(conferenceState.conference.id);\n        }\n        this._alert.warning({\n          message: conferenceErrors.bringInFailed,\n        });\n      }\n      if (!sipInstances || conferenceId === null) {\n        this.store.dispatch({\n          type: this.actionTypes.mergeFailed,\n        });\n      }\n    }\n  }\n\n  /**\n   * we need to record the merge destination when merge from the call control pages\n   * @param {webphone.session} from\n   */\n  @proxify\n  setMergeParty({ fromSessionId, toSessionId }) {\n    if (fromSessionId) {\n      return this.store.dispatch({\n        type: this.actionTypes.updateFromSession,\n        fromSessionId,\n      });\n    }\n    return this.store.dispatch({\n      type: this.actionTypes.updateToSession,\n      toSessionId,\n    });\n  }\n\n  getOnlinePartyProfiles(id) {\n    const conferenceData = this.conferences[id];\n\n    if (conferenceData) {\n      return ascendSortParties(conferenceData.conference.parties)\n        .reduce((accum, party, idx) => {\n          if (party.status.code.toLowerCase() !== partyStatusCode.disconnected) {\n            // 0 position is the host\n            accum.push({ idx, party });\n          }\n          return accum;\n        }, [])\n        .map(({ idx, party }) => ({ ...party, ...conferenceData.profiles[idx] }))\n        .filter(i => !!i);\n    }\n    return null;\n  }\n\n  getOnlineParties(id) {\n    const conferenceData = this.conferences[id];\n    if (conferenceData) {\n      return conferenceData.conference.parties.filter(\n        p => p.status.code.toLowerCase() !== partyStatusCode.disconnected\n      );\n    }\n    return null;\n  }\n\n  countOnlineParties(id) {\n    const res = this.getOnlineParties(id);\n    return Array.isArray(res) ? res.length : null;\n  }\n\n  isOverload(id) {\n    return this.countOnlineParties(id) >= this.capacity;\n  }\n\n  @proxify\n  async startPollingConferenceStatus(id) {\n    if (this._timers[id] || !this._pulling) {\n      return;\n    }\n\n    await this.updateConferenceStatus(id);\n    this._timers[id] = setTimeout(\n      async () => {\n        await this.updateConferenceStatus(id);\n        this.stopPollingConferenceStatus(id);\n        if (this.conferences[id]) {\n          this.startPollingConferenceStatus(id);\n        }\n      },\n      this._ttl);\n  }\n\n  stopPollingConferenceStatus(id) {\n    clearTimeout(this._timers[id]);\n    delete this._timers[id];\n  }\n\n  openPulling() {\n    this._pulling = true;\n  }\n\n  closePulling() {\n    this._pulling = false;\n  }\n\n  togglePulling() {\n    this._pulling = !this.pulling;\n  }\n\n  setCapatity(capacity = MAXIMUM_CAPACITY) {\n    if (typeof capacity !== 'number') {\n      throw new Error('The capcity must be a number');\n    }\n    this.capacity = capacity;\n    return capacity;\n  }\n\n  setTimeout(timeout = DEFAULT_TIMEOUT) {\n    if (typeof timeout !== 'number') {\n      throw new Error('The timeout must be a number');\n    }\n    this._timout = timeout;\n    return timeout;\n  }\n\n  _init() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess\n    });\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this._init();\n    } else if (this._shouldReset()) {\n      this._reset();\n    }\n  }\n\n  _reset() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess\n    });\n  }\n\n  _shouldInit() {\n    return (\n      (this._auth.loggedIn && this._auth.ready) &&\n      this._alert.ready &&\n      this._callingSettings.ready &&\n      this._call.ready &&\n      this._rolesAndPermissions.ready &&\n      this._connectivityMonitor.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        (!this._auth.loggedIn || !this._auth.ready)\n        || !this._alert.ready\n        || !this._callingSettings.ready\n        || !this._call.ready\n        || !this._rolesAndPermissions.ready\n        || !this._connectivityMonitor.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _checkPermission() {\n    if (!this._rolesAndPermissions.callingEnabled || !this._rolesAndPermissions.webphoneEnabled) {\n      this._alert.danger({\n        message: permissionsMessages.insufficientPrivilege,\n        ttl: 0,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  @proxify\n  _hookConference(conference, session) {\n    ['accepted'].forEach(\n      evt => session.on(\n        evt,\n        () => this.startPollingConferenceStatus(conference.id)\n      )\n    );\n    ['terminated', 'failed', 'rejected'].forEach(\n      evt => session.on(evt, () => {\n        this.store.dispatch({\n          type: this.actionTypes.terminateConferenceSucceeded,\n          conference,\n        });\n        this.stopPollingConferenceStatus(conference.id);\n      })\n    );\n  }\n\n  @proxify\n  async _mergeToConference(webphoneSessions = []) {\n    const conferenceState = Object.values(this.conferences)[0];\n\n    if (conferenceState) {\n      const conferenceId = conferenceState.conference.id;\n      this.stopPollingConferenceStatus(conferenceId);\n      // for the sake of participants ordering, we can't concurrently bring in the participants\n      for (const webphoneSession of webphoneSessions) {\n        await this.bringInToConference(conferenceId, webphoneSession, true);\n      }\n      if (!this.conferences[conferenceId].profiles.length) {\n        throw new Error('bring-in operations failed, not all intended parties were brought in');\n      }\n      this.startPollingConferenceStatus(conferenceId);\n      return conferenceId;\n    }\n    const { id } = await this.makeConference(true);\n    let confereceAccepted = false;\n    await Promise.race([\n      new Promise((resolve, reject) => {\n        const session = this._webphone._sessions.get(this.conferences[id].sessionId);\n        session.on('accepted', () => {\n          confereceAccepted = true;\n          resolve();\n        });\n        session.on('cancel', () => reject(new Error('conferecing cancel')));\n        session.on('failed', () => reject(new Error('conferecing failed')));\n        session.on('rejected', () => reject(new Error('conferecing rejected')));\n        session.on('terminated', () => reject(new Error('conferecing terminated')));\n      }),\n      new Promise((resolve, reject) => {\n        setTimeout(() => (confereceAccepted ? resolve() : reject(new Error('conferecing timeout')))\n          , this._timout);\n      })\n    ]);\n\n    await this._mergeToConference(webphoneSessions);\n    return id;\n  }\n\n  @proxify\n  async _makeConference(propagate = false) {\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.makeConference,\n      });\n\n      // TODO: replace with SDK function chaining calls\n      const rawResponse = await this._client.service.platform()\n        .post('/account/~/telephony/conference', {});\n      const response = rawResponse.json();\n      const conference = response.session;\n      const phoneNumber = conference.voiceCallToken;\n      // whether to mutate the session to mark the conference?\n      const session = await this._call.call({\n        phoneNumber,\n        isConference: true,\n      });\n\n      if (typeof session === 'object' &&\n        Object.prototype.toString.call(session.on).toLowerCase() === '[object function]') {\n        this._hookConference(conference, session);\n\n        this.store.dispatch({\n          type: this.actionTypes.makeConferenceSucceeded,\n          conference,\n          sessionId: session.id,\n          parties: [],\n        });\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.makeConferenceFailed,\n        });\n      }\n\n      return conference;\n    } catch (e) {\n      this.store.dispatch({\n        type: this.actionTypes.makeConferenceFailed,\n        message: e.toString()\n      });\n\n      if (!propagate) {\n        this._alert.warning({\n          message: conferenceErrors.makeConferenceFailed,\n        });\n        return null;\n      }\n      // need to propagate to out side try...catch block\n      throw e;\n    }\n  }\n\n  @proxify\n  async _getProfile(sessionInstance) {\n    if (!this._contactMatcher) {\n      return null;\n    }\n    const session = this._webphone.sessions.find(session => session.id === sessionInstance.id);\n    const {\n      to, contactMatch, from, fromNumber, direction\n    } = session;\n\n    let { toUserName } = session;\n    let avatarUrl;\n    let rcId;\n    let partyNumber;\n\n    if (direction === callDirections.outbound) {\n      partyNumber = to;\n    } else {\n      partyNumber = fromNumber;\n    }\n\n    // HACK: refresh the cache\n    await this._contactMatcher.match({\n      queries: [partyNumber],\n      ignoreCache: true\n    });\n\n    if (this._contactMatcher && this._contactMatcher.dataMapping) {\n      const contactMapping = this._contactMatcher.dataMapping;\n      let contact = contactMatch;\n      let nameMatches;\n\n      if (direction === callDirections.outbound) {\n        nameMatches = (contactMapping && contactMapping[to]) || [];\n      } else {\n        nameMatches = (contactMapping && contactMapping[from]) || [];\n      }\n\n      if (!contact) {\n        contact = nameMatches && nameMatches[0];\n      }\n      if (contact) {\n        avatarUrl = contact.profileImageUrl;\n        toUserName = contact.name;\n        rcId = contact.id;\n      }\n    }\n\n    return {\n      avatarUrl,\n      toUserName,\n      partyNumber,\n      rcId,\n    };\n  }\n\n  @proxify\n  async onMerge({ sessionId }) {\n    const session = this._webphone._sessions.get(sessionId);\n    const isSessionOnhold = session.isOnHold().local;\n    this.setMergeParty({ toSessionId: sessionId });\n    const sessionToMergeWith = this._webphone._sessions.get(this.mergingPair.fromSessionId);\n    const webphoneSessions = sessionToMergeWith\n      ? [sessionToMergeWith, session]\n      : [session];\n    await this.mergeToConference(webphoneSessions);\n    const conferenceData = Object.values(this.conferences)[0];\n    const conferenceSession = this._webphone._sessions.get(conferenceData.sessionId);\n    const isConferenceOnhold = conferenceSession.isOnHold().local;\n\n    if (!conferenceData) {\n      await this._webphone.resume(session.id);\n      return null;\n    }\n\n    if (isSessionOnhold) {\n      this._webphone.hold(conferenceData.sessionId);\n      return conferenceData;\n    }\n\n    if (isConferenceOnhold) {\n      /**\n       * because session termination operation in conferenceCall._mergeToConference,\n       * need to wait for webphone.getActiveSessionIdReducer to update\n       */\n      this._webphone.resume(conferenceData.sessionId);\n      return conferenceData;\n    }\n    return null;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get conferences() {\n    return this.state.conferences;\n  }\n\n  get conferenceCallStatus() {\n    return this.state.conferenceCallStatus;\n  }\n\n  get isMerging() {\n    return this.state.isMerging;\n  }\n\n  get mergingPair() {\n    return this.state.mergingPair;\n  }\n\n  get partyProfiles() {\n    return this._selectors.partyProfiles();\n  }\n}\n"]}