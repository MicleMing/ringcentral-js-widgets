{"version":3,"sources":["modules/CallMonitor/index.js"],"names":["matchWephoneSessionWithAcitveCall","sessions","callItem","sipData","undefined","find","session","direction","toName","toLowerCase","id","indexOf","callDirections","inbound","remoteUri","from","outbound","to","webphoneStartTime","creationTime","startTime","Math","abs","CallMonitor","deps","dep","optional","call","accountInfo","detailedPresence","activityMatcher","contactMatcher","tabManager","webphone","onRinging","onNewCall","onCallUpdated","onCallEnded","storage","options","actionTypes","_call","_accountInfo","ensureExist","_detailedPresence","_contactMatcher","_activityMatcher","_tabManager","_webphone","_onRinging","_onNewCall","_onCallUpdated","_onCallEnded","_storage","_callMatchedKey","_reducer","registerReducer","key","reducer","_normalizedCalls","addSelector","calls","countryCode","cachedSessions","callsFromPresence","cachedCalls","length","filter","x","webphoneSession","i","combinedCalls","forEach","cachedCall","push","theSessions","map","fromNumber","phoneNumber","toNumber","sort","l","r","_selectors","normalizedCalls","dataMapping","callMatched","contactMapping","activityMapping","fromMatches","toMatches","toNumberEntity","sessionId","activityMatches","_activeOnHoldCalls","_activeCurrentCalls","slice","lastEndedSessions","sessionsCache","endCall","output","numberMap","addIfNotExist","number","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","sessionIds","_lastProcessedNumbers","_lastProcessedCalls","_lastProcessedIds","pending","store","dispatch","type","init","initSuccess","reset","resetSuccess","active","triggerMatch","oldCalls","toNumberEntities","cleanToNumberEntities","entities","sortByStartTime","oldCallIndex","findIndex","item","oldCall","splice","telephonyStatus","entity","index","toEntity","toMatch","entityId","_removeMatched","_setMatchedData","toEntityId","subscribe","_onStateChange","console","log","matched","setData","state","status","moduleStatuses","getItem","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls","RcModule"],"mappings":"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","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport { Module } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport actionTypes from './actionTypes';\nimport callDirections from '../../enums/callDirections';\nimport getCallMonitorReducer, { getCallMatchedReducer } from './getCallMonitorReducer';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport {\n  isRinging,\n  hasRingingCalls,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport ensureExist from '../../lib/ensureExist';\nimport { isRing, isOnHold, sortByLastHoldingTimeDesc, isConferenceSession } from '../Webphone/webphoneHelper';\n\nfunction matchWephoneSessionWithAcitveCall(sessions, callItem) {\n  if (!sessions || !callItem.sipData) {\n    return undefined;\n  }\n  return sessions.find((session) => {\n    if (session.direction !== callItem.direction) {\n      return false;\n    }\n\n    /**\n     * Hack: for conference call, the `to` field is Conference,\n     * and the callItem's id won't change. According to `sip.js/src/session.js`\n     * the `InviteClientContext`'s id will always begin with callItem's id.\n     */\n    if (callItem.toName && callItem.toName.toLowerCase() === 'conference') {\n      return session.id.indexOf(callItem.id) === 0;\n    }\n\n    if (\n      session.direction === callDirections.inbound &&\n      callItem.sipData.remoteUri.indexOf(session.from) === -1\n    ) {\n      return false;\n    }\n    if (\n      session.direction === callDirections.outbound &&\n      callItem.sipData.remoteUri.indexOf(session.to) === -1\n    ) {\n      return false;\n    }\n    let webphoneStartTime;\n    if (session.direction === callDirections.inbound) {\n      webphoneStartTime = session.creationTime;\n    } else {\n      webphoneStartTime = session.startTime || session.creationTime;\n    }\n    // 16000 is from experience in test.\n    // there is delay bettween active call created and webphone session created\n    // for example, the time delay is decided by when webphone get invite info\n    if (\n      Math.abs(callItem.startTime - webphoneStartTime) > 16000\n    ) {\n      return false;\n    }\n    return true;\n  });\n}\n\n/**\n * @class\n * @description active calls monitor module\n */\n@Module({\n  deps: [\n    'AccountInfo',\n    'Storage',\n    'DetailedPresence',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'Webphone', optional: true },\n    { dep: 'Call', optional: true },\n    { dep: 'ActivityMatcher', optional: true },\n    { dep: 'CallMonitorOptions', optional: true },\n    { dep: 'TabManager', optional: true },\n  ]\n})\nexport default class CallMonitor extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Call} params.call - call module instance\n   * @param {AccountInfo} params.accountInfo - accountInfo module instance\n   * @param {DetailedPresence} params.detailedPresence - detailedPresence module instance\n   * @param {ActivityMatcher} params.activityMatcher - activityMatcher module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   * @param {Webphone} params.webphone - webphone module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {Function} params.onRinging - function on ring\n   * @param {Function} params.onNewCall - function on new call\n   * @param {Function} params.onCallUpdated - function on call updated\n   * @param {Function} params.onCallEnded - function on call ended\n   */\n  constructor({\n    call,\n    accountInfo,\n    detailedPresence,\n    activityMatcher,\n    contactMatcher,\n    tabManager,\n    webphone,\n    onRinging,\n    onNewCall,\n    onCallUpdated,\n    onCallEnded,\n    storage,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._call = call;\n    this._accountInfo = this::ensureExist(accountInfo, 'accountInfo');\n    this._detailedPresence = this::ensureExist(detailedPresence, 'detailedPresence');\n    this._contactMatcher = contactMatcher;\n    this._activityMatcher = activityMatcher;\n    this._tabManager = tabManager;\n    this._webphone = webphone;\n    this._onRinging = onRinging;\n    this._onNewCall = onNewCall;\n    this._onCallUpdated = onCallUpdated;\n    this._onCallEnded = onCallEnded;\n    this._storage = this::ensureExist(storage, 'storage');\n    this._callMatchedKey = 'callMatched';\n\n    this._reducer = getCallMonitorReducer(this.actionTypes);\n\n    this._storage.registerReducer({\n      key: this._callMatchedKey,\n      reducer: getCallMatchedReducer(this.actionTypes),\n    });\n\n    let _normalizedCalls;\n    this.addSelector('normalizedCalls',\n      () => this._detailedPresence.calls,\n      () => this._accountInfo.countryCode,\n      () => this._webphone && this._webphone.sessions,\n      () => this._webphone && this._webphone.cachedSessions,\n      (callsFromPresence, countryCode, sessions, cachedSessions) => {\n        // match cached calls\n        let cachedCalls = [];\n        if (_normalizedCalls && cachedSessions && cachedSessions.length) {\n          cachedCalls = _normalizedCalls.filter(x =>\n            x.webphoneSession &&\n            cachedSessions.find(i => i.id === x.webphoneSession.id)\n          );\n        }\n\n        // combine\n        const combinedCalls = [...callsFromPresence]; // clone\n        cachedCalls.forEach((cachedCall) => {\n          if (!callsFromPresence.find(x => x.id === cachedCall.id)) {\n            combinedCalls.push(cachedCall);\n          }\n        });\n\n        // mapping and sort\n        let theSessions = sessions || [];\n        _normalizedCalls = combinedCalls.map((callItem) => {\n          // use account countryCode to normalize number due to API issues [RCINT-3419]\n          const fromNumber = normalizeNumber({\n            phoneNumber: callItem.from && callItem.from.phoneNumber,\n            countryCode,\n          });\n          const toNumber = normalizeNumber({\n            phoneNumber: callItem.to && callItem.to.phoneNumber,\n            countryCode,\n          });\n          const webphoneSession = matchWephoneSessionWithAcitveCall(theSessions, callItem);\n          theSessions = theSessions.filter(x => x !== webphoneSession);\n          return {\n            ...callItem,\n            from: {\n              phoneNumber: fromNumber,\n            },\n            to: {\n              phoneNumber: toNumber,\n            },\n            startTime: (\n              (webphoneSession && webphoneSession.startTime) ||\n              callItem.startTime\n            ),\n            webphoneSession,\n          };\n        }).sort((l, r) => (\n          sortByLastHoldingTimeDesc(l.webphoneSession, r.webphoneSession)\n        )).filter((callItem) => {\n          // filtering out the conferece during merging\n          if (cachedCalls.length) {\n            return !isConferenceSession(callItem.webphoneSession);\n          }\n          return true;\n        });\n\n        return _normalizedCalls;\n      },\n    );\n\n    this.addSelector('calls',\n      this._selectors.normalizedCalls,\n      () => (this._contactMatcher && this._contactMatcher.dataMapping),\n      () => (this._activityMatcher && this._activityMatcher.dataMapping),\n      () => (this.callMatched),\n      (normalizedCalls, contactMapping = {}, activityMapping = {}, callMatched) => {\n        const calls = normalizedCalls.map((callItem) => {\n          const fromNumber = callItem.from && callItem.from.phoneNumber;\n          const toNumber = callItem.to && callItem.to.phoneNumber;\n          const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n          const toMatches = (toNumber && contactMapping[toNumber]) || [];\n          const toNumberEntity = callMatched[callItem.sessionId];\n          return {\n            ...callItem,\n            fromMatches,\n            toMatches,\n            activityMatches: (activityMapping[callItem.sessionId]) || [],\n            toNumberEntity,\n          };\n        });\n        return calls;\n      }\n    );\n\n    this.addSelector('activeRingCalls',\n      this._selectors.calls,\n      calls => calls.filter(callItem =>\n        callItem.webphoneSession &&\n        isRing(callItem.webphoneSession)\n      )\n    );\n\n    this.addSelector('_activeOnHoldCalls',\n      this._selectors.calls,\n      calls => calls.filter(callItem =>\n        callItem.webphoneSession &&\n        isOnHold(callItem.webphoneSession)\n      )\n    );\n\n    this.addSelector('_activeCurrentCalls',\n      this._selectors.calls,\n      calls => calls.filter(callItem =>\n        callItem.webphoneSession &&\n        !isOnHold(callItem.webphoneSession) &&\n        !isRing(callItem.webphoneSession)\n      )\n    );\n\n    this.addSelector('activeOnHoldCalls',\n      this._selectors._activeOnHoldCalls,\n      this._selectors._activeCurrentCalls,\n      (_activeOnHoldCalls, _activeCurrentCalls) => (\n        (_activeOnHoldCalls.length && !_activeCurrentCalls.length) ?\n          _activeOnHoldCalls.slice(1) :\n          _activeOnHoldCalls\n      ),\n    );\n\n    this.addSelector('activeCurrentCalls',\n      this._selectors._activeCurrentCalls,\n      this._selectors._activeOnHoldCalls,\n      (_activeCurrentCalls, _activeOnHoldCalls) => (\n        (!_activeCurrentCalls.length && _activeOnHoldCalls.length) ?\n          _activeOnHoldCalls.slice(0, 1) :\n          _activeCurrentCalls\n      )\n    );\n\n    this.addSelector('otherDeviceCalls',\n      this._selectors.calls,\n      () => this._webphone && this._webphone.lastEndedSessions,\n      (calls, lastEndedSessions) => {\n        let sessionsCache = lastEndedSessions;\n        return calls.filter((callItem) => {\n          if (callItem.webphoneSession) {\n            return false;\n          }\n          if (!sessionsCache) {\n            return true;\n          }\n          const endCall = matchWephoneSessionWithAcitveCall(sessionsCache, callItem);\n          sessionsCache = sessionsCache.filter(x => x !== endCall);\n          return !endCall;\n        });\n      },\n    );\n\n    this.addSelector('uniqueNumbers',\n      this._selectors.normalizedCalls,\n      (normalizedCalls) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(number) {\n          if (!numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        normalizedCalls.forEach((callItem) => {\n          if (callItem.from && callItem.from.phoneNumber) {\n            addIfNotExist(callItem.from.phoneNumber);\n          }\n          if (callItem.to && callItem.to.phoneNumber) {\n            addIfNotExist(callItem.to.phoneNumber);\n          }\n        });\n        return output;\n      }\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: this._selectors.uniqueNumbers,\n        readyCheckFn: () => (\n          this._accountInfo.ready &&\n          this._detailedPresence.ready\n        ),\n      });\n    }\n\n    this.addSelector('sessionIds',\n      () => this._detailedPresence.calls,\n      calls => calls.map(callItem => callItem.sessionId)\n    );\n\n    if (this._activityMatcher) {\n      this._activityMatcher.addQuerySource({\n        getQueriesFn: this._selectors.sessionIds,\n        readyCheckFn: () => this._detailedPresence.ready,\n      });\n    }\n\n    this._lastProcessedNumbers = null;\n    this._lastProcessedCalls = null;\n    this._lastProcessedIds = null;\n  }\n\n  async _onStateChange() {\n    if (\n      (!this._call || this._call.ready) &&\n      this._accountInfo.ready &&\n      this._detailedPresence.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._activityMatcher || this._activityMatcher.ready) &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._storage.ready &&\n      this.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        (this._call && !this._call.ready) ||\n        !this._accountInfo.ready ||\n        !this._detailedPresence.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._activityMatcher && !this._activityMatcher.ready) ||\n        (this._tabManager && !this._tabManager.ready) ||\n        !this._storage.ready\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this._lastProcessedCalls = null;\n      this._lastProcessedIds = null;\n      this._lastProcessedNumbers = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready\n    ) {\n      const uniqueNumbers = this._selectors.uniqueNumbers();\n      if (\n        this._lastProcessedNumbers !== uniqueNumbers &&\n        (!this._tabManager || this._tabManager.active)\n      ) {\n        this._lastProcessedNumbers = uniqueNumbers;\n        if (this._contactMatcher && this._contactMatcher.ready) {\n          this._contactMatcher.triggerMatch();\n        }\n      }\n      const sessionIds = this._selectors.sessionIds();\n      if (\n        this._lastProcessedIds !== sessionIds &&\n        (!this._tabManager || this._tabManager.active)\n      ) {\n        this._lastProcessedIds = sessionIds;\n        if (this._activityMatcher && this._activityMatcher.ready) {\n          this._activityMatcher.triggerMatch();\n        }\n      }\n\n      if (\n        this._lastProcessedCalls !== this.calls\n      ) {\n        const oldCalls = (\n          this._lastProcessedCalls &&\n          this._lastProcessedCalls.slice()\n        ) || [];\n\n        this._lastProcessedCalls = this.calls;\n\n        // no ringing calls\n        if (\n          this._call &&\n          oldCalls.length !== 0 &&\n          this.calls.length === 0 &&\n          this._call.toNumberEntities &&\n          this._call.toNumberEntities.length !== 0\n        ) {\n          // console.log('no calls clean to number:');\n          this._call.cleanToNumberEntities();\n        }\n\n        let entities = this._call ? this._call.toNumberEntities.sort(sortByStartTime) : [];\n        // const matchedMap = {};\n        this.calls.forEach((call) => {\n          const oldCallIndex = oldCalls.findIndex(item => item.sessionId === call.sessionId);\n          if (oldCallIndex === -1) {\n            if (typeof this._onNewCall === 'function') {\n              this._onNewCall(call);\n            }\n            if (typeof this._onRinging === 'function' && isRinging(call)) {\n              this._onRinging(call);\n            }\n          } else {\n            const oldCall = oldCalls[oldCallIndex];\n            oldCalls.splice(oldCallIndex, 1);\n            if (\n              call.telephonyStatus !== oldCall.telephonyStatus &&\n              typeof this._onCallUpdated === 'function'\n            ) {\n              this._onCallUpdated(call);\n            }\n          }\n          entities.find((entity, index) => {\n            const toEntity = call.toMatches.find(toMatch =>\n              toMatch.id === entity.entityId\n            );\n            if (toEntity !== undefined) {\n              entities = this._removeMatched(index, entities);\n              this._setMatchedData({\n                sessionId: call.sessionId,\n                toEntityId: toEntity.id,\n              });\n              return true;\n            }\n            return false;\n          });\n        });\n\n        oldCalls.forEach((call) => {\n          if (typeof this._onCallEnded === 'function') {\n            this._onCallEnded(call);\n          }\n        });\n      }\n    }\n  }\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _removeMatched(index, entities) {\n    console.log('removeMatched:', index);\n    entities.splice(index, 1);\n    console.log('entities after splice:', entities);\n    return entities;\n  }\n\n  _setMatchedData(matched) {\n    this.store.dispatch({\n      type: this.actionTypes.setData,\n      ...matched,\n    });\n  }\n\n  get hasRingingCalls() {\n    return hasRingingCalls(this.calls);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n\n  get callMatched() {\n    return this._storage.getItem(this._callMatchedKey);\n  }\n\n  get activeRingCalls() {\n    return this._selectors.activeRingCalls();\n  }\n\n  get activeOnHoldCalls() {\n    return this._selectors.activeOnHoldCalls();\n  }\n\n  get activeCurrentCalls() {\n    return this._selectors.activeCurrentCalls();\n  }\n\n  get otherDeviceCalls() {\n    return this._selectors.otherDeviceCalls();\n  }\n}\n"]}