{"version":3,"sources":["containers/ActiveCallsPage/index.js"],"names":["mapToProps","_","phone","brand","callLogger","callMonitor","locale","regionSettings","rolesAndPermissions","conferenceCall","callingSettings","showContactDisplayPlaceholder","isWebRTC","callingMode","callingModes","webphone","disableMerge","hasConferenceCall","conferenceData","conferenceList","conferences","conference","length","isOverload","id","currentLocale","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls","areaCode","countryCode","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","showSpinner","isMerging","fullName","autoLog","conferenceCallEquipped","conferencePartiesAvatarUrls","getOnlinePartyProfiles","map","profile","avatarUrl","mapToFunctions","composeText","contactMatcher","contactSearch","routerInteraction","composeTextRoute","callCtrlRoute","onCreateContact","onLogCall","isLoggedContact","onCallsEmpty","onViewContact","showViewContact","formatPhone","phoneNumber","webphoneAnswer","answer","webphoneToVoicemail","toVoiceMail","webphoneReject","reject","webphoneHangup","hangup","webphoneResume","resume","currentPath","push","contact","type","onClickToSms","isDummyContact","clean","name","updateTypingToNumber","search","searchString","addToRecipients","undefined","entityType","hasMatchNumber","ignoreCache","forceMatchNumber","call","redirect","logCall","sessions","mergeToConference","session","activeSessionId","isSessionAConferenceCall","sessionId","isConferenceSession","ActiveCallsPage","ActiveCallsPanel","default"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport sleep from 'ringcentral-integration/lib/sleep';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\nimport withPhone from '../../lib/withPhone';\nimport ActiveCallsPanel from '../../components/ActiveCallsPanel';\n\nfunction mapToProps(_, {\n  phone: {\n    brand,\n    callLogger,\n    callMonitor,\n    locale,\n    regionSettings,\n    rolesAndPermissions,\n    conferenceCall,\n    callingSettings,\n  },\n  showContactDisplayPlaceholder = false,\n}) {\n  const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n  let disableMerge = !isWebRTC;\n  let hasConferenceCall = false;\n  let conferenceData = null;\n  if (conferenceCall) {\n    const conferenceList = Object.values(conferenceCall.conferences);\n    const conference = conferenceList.length ? conferenceList[0] : null;\n    conferenceData = Object.values(conferenceCall.conferences)[0];\n    hasConferenceCall = !!conference;\n    if (conference) {\n      disableMerge = conferenceCall.isOverload(conference.conference.id);\n    }\n  }\n  return {\n    currentLocale: locale.currentLocale,\n    activeRingCalls: callMonitor.activeRingCalls,\n    activeOnHoldCalls: callMonitor.activeOnHoldCalls,\n    activeCurrentCalls: callMonitor.activeCurrentCalls,\n    otherDeviceCalls: callMonitor.otherDeviceCalls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    showSpinner: !!(conferenceCall && conferenceCall.isMerging),\n    brand: brand.fullName,\n    showContactDisplayPlaceholder,\n    autoLog: !!(callLogger && callLogger.autoLog),\n    isWebRTC,\n    conferenceCallEquipped: !!conferenceCall,\n    hasConferenceCall,\n    disableMerge,\n    conferencePartiesAvatarUrls: (\n      conferenceData && conferenceCall\n        .getOnlinePartyProfiles(conferenceData.conference.id)\n        .map(profile => profile.avatarUrl)\n    ) || []\n  };\n}\n\nfunction mapToFunctions(_, {\n  phone: {\n    callLogger,\n    composeText,\n    contactMatcher,\n    contactSearch,\n    regionSettings,\n    routerInteraction,\n    webphone,\n    callingSettings,\n    conferenceCall,\n  },\n  composeTextRoute = '/composeText',\n  callCtrlRoute = '/calls/active',\n  onCreateContact,\n  onLogCall,\n  isLoggedContact,\n  onCallsEmpty,\n  onViewContact,\n  showViewContact = true,\n}) {\n  const isWebRTC = callingSettings.callingMode === callingModes.webphone;\n  return {\n    formatPhone(phoneNumber) {\n      return formatNumber({\n        phoneNumber,\n        areaCode: regionSettings.areaCode,\n        countryCode: regionSettings.countryCode,\n      });\n    },\n    async webphoneAnswer(...args) {\n      return (webphone && webphone.answer(...args));\n    },\n    async webphoneToVoicemail(...args) {\n      return (webphone && webphone.toVoiceMail(...args));\n    },\n    async webphoneReject(...args) {\n      return (webphone && webphone.reject(...args));\n    },\n    async webphoneHangup(...args) {\n      return (webphone && webphone.hangup(...args));\n    },\n    async webphoneResume(...args) {\n      if (!webphone) {\n        return;\n      }\n      await webphone.resume(...args);\n      if (routerInteraction.currentPath !== callCtrlRoute) {\n        routerInteraction.push(callCtrlRoute);\n      }\n    },\n    onViewContact: showViewContact ?\n      (onViewContact || (({ contact }) => {\n        const { id, type } = contact;\n        routerInteraction.push(`/contacts/${type}/${id}?direct=true`);\n      })) : null,\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (routerInteraction) {\n          routerInteraction.push(composeTextRoute);\n        }\n        composeText.clean();\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToRecipients(contact);\n        }\n      } :\n      undefined,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n      (callLogger && (async ({ call, contact, redirect = true }) => {\n        await callLogger.logCall({\n          call,\n          contact,\n          redirect,\n        });\n      })),\n    onCallsEmpty: onCallsEmpty || (() => {\n      if (isWebRTC && !webphone.sessions.length) {\n        routerInteraction.push('/dialer');\n      }\n    }),\n    /**\n     * if there is a existing conference, merge into it\n     * else make one and merge into it;\n     * @param {[string]} sessionIds\n     */\n    async mergeToConference(...args) {\n      await conferenceCall.mergeToConference(...args);\n      const conferenceData = Object.values(conferenceCall.conferences)[0];\n      if (conferenceData && conferenceData.session.id === webphone.activeSessionId) {\n        await sleep(200);\n        webphone.resume(conferenceData.session.id);\n      }\n    },\n    isSessionAConferenceCall(sessionId) {\n      return !!(\n        conferenceCall\n        && conferenceCall.isConferenceSession(sessionId)\n      );\n    },\n  };\n}\n\nconst ActiveCallsPage = withPhone(connect(mapToProps, mapToFunctions)(ActiveCallsPanel));\n\nexport {\n  mapToProps,\n  mapToFunctions,\n  ActiveCallsPage as default,\n};\n"]}